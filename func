#监控编译安装中是否有错误，有错误就停止安装,并把错误写入到文件/root/ezhttp_errors.log
error_detect(){
local command=$1
local cur_soft=`pwd | awk -F'/' '{print $NF}'`
${command}
if [ $? != 0 ];then
	distro=`cat /etc/issue`
	version=`cat /proc/version`
	architecture=`uname -m`
	cat >>/root/ezhttp_errors.log<<EOF
	ezhttp errors:
	distributions:$distro
	architecture:$architecture
	version:$version
	Nginx: ${nginx}
	Nginx compile parameter:${nginx_configure_args}
	Apache compile parameter:${apache_configure_args}
	MySQL Server: $mysql
	MySQL compile parameter: ${mysql_configure_args}
	PHP Version: $php
	php compile parameter: ${php_configure_args}
	Other Software: ${other_soft_install[@]}
	issue:failed to install $cur_soft
EOF
	echo "#########################################################"
	echo "failed to install $cur_soft."    
	echo "please visit website http://www.centos.bz/ezhttp/"
	echo "and submit /root/ezhttp_errors.log ask for help."
	echo "#########################################################"
	exit 1
fi
}

#保证是在根用户下运行
rootness(){
# Make sure only root can run our script
if [[ $EUID -ne 0 ]]; then
	echo "This script must be run as root" 1>&2
	exit 1
fi
}

#禁止selinux，因为在selinux下会出现很多意想不到的问题
disable_selinux(){
if [ -s /etc/selinux/config ] && grep 'SELINUX=enforcing' /etc/selinux/config; then
	sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
	setenforce 0
fi
}

#大写转换成小写
upcase_to_lowcase(){
words=$1
echo $words | tr '[A-Z]' '[a-z]'
}

#多核并行编译
parallel_make(){
local para=$1
cpunum=`cat /proc/cpuinfo |grep 'processor'|wc -l`

#判断是否开启多核编译
if [ $parallel_compile == 0 ];then
	cpunum=1
fi

if [ $cpunum == 1 ];then
	[ "$para" == "" ] && make || make "$para"
else
	[ "$para" == "" ] && make -j$cpunum || 	make -j$cpunum "$para"
fi	
}

#开机启动
boot_start(){
if [ "`check_sys_version`" == "debian" ];then
	update-rc.d -f $1 defaults
elif [ "`check_sys_version`" == "centos" ];then
	chkconfig --add $1
	chkconfig $1 on
fi
}

#关闭开机启动
boot_stop(){
if [ "`check_sys_version`" == "debian" ];then
	update-rc.d -f $1 remove
elif [ "`check_sys_version`" == "centos" ];then
	chkconfig $1 off
fi
}

#判断路径输入是否合法
filter_location(){
local location=$1
if ! echo $location | grep -q "^/";then
	while true
	do
		read -p "input error,please input location again." location
		echo $location | grep -q "^/" && echo $location && break
	done
else
	echo $location
fi
}

#检查压缩包完善性
check_integrity(){
	local filename=$1
	if echo $filename | grep -q -E "(tar\.gz|tgz)$";then
		return `gzip -t ${cur_dir}/soft/$filename`
	elif echo $filename | grep -q -E "tar\.bz2$";then
		return `bzip2 -t ${cur_dir}/soft/$filename`
	fi
}

#下载软件
download_file(){
local url1=$1
local url2=$2
local filename=$3
if [ -s "${cur_dir}/soft/${filename}" ];then
	echo "${filename} is existed.check the file integrity."

	if check_integrity "${filename}";then
		echo "the file $filename is complete."
	else
		echo "the file $filename is incomplete.redownload now..."
		rm -f ${cur_dir}/soft/${filename}
		download_file "$url1" "$url2" "$filename"		
	fi

else
	[ ! -d "${cur_dir}/soft" ] && mkdir -p ${cur_dir}/soft
	cd ${cur_dir}/soft
	choose_url_download "$url1" "$url2" "$filename"
fi
}

#判断64位系统
is_64bit(){
	if [ `getconf WORD_BIT` = '32' ] && [ `getconf LONG_BIT` = '64' ] ; then
		return 0
	else
		return 1
	fi		
}

#选择最优下载url
choose_url_download()
{
local url1=$1
local url2=$2
local filename=$3
#测试官方下载速度
echo "testing Official mirror download speed..."
speed2=`curl -m 5 -L -s -w '%{speed_download}' "$url2" -o /dev/null`
echo "Official mirror download speed is $speed2"

#测试第三方下载速度
echo "testing third party mirror download speed..."
speed1=`curl -m 5 -L -s -w '%{speed_download}' "$url1" -o /dev/null`
echo "third party mirror download speed is $speed1"
speed1=${speed1%%.*}
speed2=${speed2%%.*}
if [ $speed1 -gt $speed2 ];then
	url=$url1
	backup_url=$url2
else
	url=$url2
	backup_url=$url1
fi
echo "use the url $url to download $filename.."
sleep 1
#开始下载
wget_file "${url}" "${filename}" 

#测试下载文件完整性,不完整则使用第二个下载地址
if ! check_integrity ${filename};then
	wget_file "${backup_url}" "${filename}"
	#再次测试文件完整性
	if ! check_integrity ${filename};then
		echo "fail to download $filename,exited."
		exit 1
	fi	
fi

}

#wget下载
wget_file(){
	local url=$1
	local filename=$2
	if ! wget --tries=3 ${url} -O $filename;then
		echo "fail to download $filename,exited."
		exit 1
	fi
}

#检查软件md5
check_md5(){
local filename=$1
cd ${cur_dir}/soft
grep "$filename" ${cur_dir}/conf/md5.txt | sed 's/\r//g' | md5sum -c -
[ $? != 0 ] && echo "$filename md5 check failed,may be the file is modified or incompleted,please redownload it, exited." && exit 1
}

#判断命令是否存在
check_command_exist(){
local command=$1
if ! which $command > /dev/null;then
	echo "$command not found,please install it."
	exit 1
fi
}

#yes or no询问
yes_or_no(){
local prompt=$1
local yaction=$2
local naction=$3
while true; do
	read -p "${prompt}" yn
	yn=`upcase_to_lowcase $yn`
	case $yn in
		y ) eval "$yaction";break;;
		n ) eval "$naction";break;;
		* ) echo "input error,please only input y or n."
	esac
done
}

#安装编译工具
install_tool(){ 
if cat /etc/issue | grep -q -E -i "ubuntu|debian";then
	apt-get -y update
	apt-get -y install gcc g++ make wget perl curl bzip2
elif cat /etc/issue | grep -q -E -i "centos|read hat|redhat";then
	yum -y install gcc gcc-c++ make wget perl  curl	bzip2
elif cat /proc/version | grep -q -E -i "ubuntu|debian";then
	apt-get -y update
	apt-get -y install gcc g++ make wget perl curl bzip2
elif cat /proc/version | grep -q -E -i "centos|read hat|redhat";then
	yum -y install gcc gcc-c++ make wget perl  curl bzip2

fi		

check_command_exist "gcc"
check_command_exist "g++"
check_command_exist "make"
check_command_exist "wget"
check_command_exist "perl"
}

#判断系统版本
check_sys_version(){
if cat /etc/issue | grep -q -E -i "ubuntu|debian";then
	echo "debian"
elif cat /etc/issue | grep -q -E -i "centos|red hat|redhat";then
	echo "centos"	
elif cat /proc/version | grep -q -E -i "ubuntu|debian";then
	echo "debian"
elif cat /proc/version | grep -q -E -i "centos|red hat|redhat";then
	echo "centos"
fi	
}

#支持包管理工具安装依赖的系统
package_support(){
if cat /etc/issue | grep -q -E -i "ubuntu|debian";then
	return 0
elif cat /etc/issue | grep -q -E -i "centos|red hat|redhat";then
	return 0
elif cat /proc/version | grep -q -E -i "ubuntu|debian";then
	return 0
elif cat /proc/version | grep -q -E -i "centos|red hat|redhat";then
	return 0
else
	return 1
fi	
}

#安装cmake
install_cmake(){
download_file "${cmake_other_link}" "${cmake_official_link}" "${cmake_filename}.tar.gz"
cd $cur_dir/soft/
tar xzvf ${cmake_filename}.tar.gz
cd ${cmake_filename}
make clean
error_detect "./configure --prefix=${depends_prefix}/${cmake_filename}"
error_detect "parallel_make"
error_detect "make install"
add_to_env "${depends_prefix}/${cmake_filename}"
}

#安装ncurses
install_ncurses(){
if [ "$mysql" == "${mysql5_1_filename}" ];then
	download_file "${ncurses_other_link2}" "${ncurses_official_link2}" "${ncurses_filename2}.tar.gz"
	cd $cur_dir/soft/
	tar xzvf ${ncurses_filename2}.tar.gz
	cd ${ncurses_filename2}
	make clean
	error_detect "./configure --prefix=${depends_prefix}/${ncurses_filename2} --with-shared"
	error_detect "parallel_make"
	error_detect "make install"
	add_to_env "${depends_prefix}/${ncurses_filename2}"
else
	download_file "${ncurses_other_link}" "${ncurses_official_link}" "${ncurses_filename}.tar.gz"
	cd $cur_dir/soft/
	tar xzvf ${ncurses_filename}.tar.gz
	cd ${ncurses_filename}
	make clean
	error_detect "./configure --prefix=${depends_prefix}/${ncurses_filename} --with-shared"
	error_detect "parallel_make"
	error_detect "make install"
	add_to_env "${depends_prefix}/${ncurses_filename}"	
fi	
}

#安装bison
install_bison(){
download_file "${bison_other_link}" "${bison_official_link}" "${bison_filename}.tar.gz"
cd $cur_dir/soft/
tar xzvf ${bison_filename}.tar.gz
cd ${bison_filename}
make clean
error_detect "./configure --prefix=${depends_prefix}/${bison_filename}"
error_detect "parallel_make"
error_detect "make install"
add_to_env "${depends_prefix}/${bison_filename}"
}

#安装patch
install_patch(){
download_file "${patch_other_link}" "${patch_official_link}" "${patch_filename}.tar.gz"
cd $cur_dir/soft/
tar xzvf ${patch_filename}.tar.gz
cd ${patch_filename}
make clean
error_detect "./configure --prefix=${depends_prefix}/${patch_filename}"
error_detect "parallel_make"
error_detect "make install"
add_to_env "${depends_prefix}/${patch_filename}"
}

#安装libiconv
install_libiconv(){
download_file "${libiconv_other_link}" "${libiconv_official_link}" "${libiconv_filename}.tar.gz"
cd $cur_dir/soft/
tar xzvf ${libiconv_filename}.tar.gz
cd ${libiconv_filename}
make clean
./configure --prefix=/usr
#修复ubuntu 13.04 错误:‘gets’未声明(不在函数内)
if grep -q -i "Ubuntu 13.04" /etc/issue;then
		parallel_make
		sed -i 's/_GL_WARN_ON_USE (gets.*/\/\/&/' srclib/stdio.h
		parallel_make
else
	parallel_make
fi
	make install
}

#安装autoconf
install_autoconf(){
download_file "${autoconf_other_link}" "${autoconf_official_link}" "${autoconf_filename}.tar.gz"
cd $cur_dir/soft/
tar xzvf ${autoconf_filename}.tar.gz
cd ${autoconf_filename}
make clean
error_detect "./configure --prefix=${depends_prefix}/${autoconf_filename}"
error_detect "parallel_make"
error_detect "make install"
add_to_env "${depends_prefix}/${autoconf_filename}"
}

#安装libxml2
install_libxml2(){
download_file "${libxml2_other_link}" "${libxml2_official_link}" "${libxml2_filename}.tar.gz"
cd $cur_dir/soft/
tar xzvf ${libxml2_filename}.tar.gz
cd ${libxml2_filename}
make clean
error_detect "./configure --prefix=${depends_prefix}/${libxml2_filename}"
error_detect "parallel_make"
error_detect "make install"
add_to_env "${depends_prefix}/${libxml2_filename}"
create_lib64_dir "${depends_prefix}/${libxml2_filename}"
}

#安装openssl
install_openssl(){
download_file "${openssl_other_link}" "${openssl_official_link}" "${openssl_filename}.tar.gz"
cd $cur_dir/soft/
tar xzvf ${openssl_filename}.tar.gz
cd ${openssl_filename}
make clean
error_detect "./config --prefix=${depends_prefix}/${openssl_filename} shared threads"
#并行编译可能会出错
error_detect "make"
error_detect "make install"
add_to_env "${depends_prefix}/${openssl_filename}"
create_lib64_dir "${depends_prefix}/${openssl_filename}"
}

#安装zlib
install_zlib(){
download_file "${zlib_other_link}" "${zlib_official_link}" "${zlib_filename}.tar.gz"
cd $cur_dir/soft/
tar xzvf ${zlib_filename}.tar.gz
cd ${zlib_filename}
make clean
error_detect "./configure --prefix=${depends_prefix}/${zlib_filename}"
error_detect "parallel_make"
error_detect "make install"
add_to_env "${depends_prefix}/${zlib_filename}"
create_lib64_dir "${depends_prefix}/${zlib_filename}"
}

#安装libcurl
install_curl(){
download_file "${libcurl_other_link}" "${libcurl_official_link}" "${libcurl_filename}.tar.gz"
cd $cur_dir/soft/
tar xzvf ${libcurl_filename}.tar.gz
cd ${libcurl_filename}
make clean
error_detect "./configure --prefix=${depends_prefix}/${libcurl_filename} --with-ssl=${depends_prefix}/${openssl_filename}"
error_detect "parallel_make"
error_detect "make install"
add_to_env "${depends_prefix}/${libcurl_filename}"
create_lib64_dir "${depends_prefix}/${libcurl_filename}"
}

#安装pcre
install_pcre(){
download_file "${pcre_other_link}" "${pcre_official_link}" "${pcre_filename}.tar.gz"
cd $cur_dir/soft/
tar xzvf ${pcre_filename}.tar.gz
cd ${pcre_filename}
make clean
error_detect "./configure --prefix=${depends_prefix}/${pcre_filename}"
error_detect "parallel_make"
error_detect "make install"
add_to_env "${depends_prefix}/${pcre_filename}"
create_lib64_dir "${depends_prefix}/${pcre_filename}"
}


#安装libtool
install_libtool(){
download_file "${libtool_other_link}" "${libtool_official_link}" "${libtool_filename}.tar.gz"
cd $cur_dir/soft/
tar xzvf ${libtool_filename}.tar.gz
cd ${libtool_filename}
make clean
error_detect "./configure --prefix=${depends_prefix}/${libtool_filename} --enable-ltdl-install"
error_detect "parallel_make"
error_detect "make install"
add_to_env "${depends_prefix}/${libtool_filename}"
create_lib64_dir "${depends_prefix}/${libtool_filename}"
}

#安装libjpeg
install_libjpeg(){
download_file "${libjpeg_other_link}" "${libjpeg_official_link}" "${libjpeg_filename}.tar.gz"
cd $cur_dir/soft/
tar xzvf ${libjpeg_filename}.tar.gz
cd ${libjpeg_filename}
make clean
\cp ${depends_prefix}/${libtool_filename}/share/libtool/config/config.sub ./
\cp ${depends_prefix}/${libtool_filename}/share/libtool/config/config.guess ./
error_detect "./configure --prefix=${depends_prefix}/${libjpeg_filename} --enable-shared --enable-static"
mkdir -p ${depends_prefix}/${libjpeg_filename}/include/ ${depends_prefix}/${libjpeg_filename}/lib/ ${depends_prefix}/${libjpeg_filename}/bin/ ${depends_prefix}/${libjpeg_filename}/man/man1/
error_detect "parallel_make"
error_detect "make install"
add_to_env "${depends_prefix}/${libjpeg_filename}"
create_lib64_dir "${depends_prefix}/${libjpeg_filename}"
}

#安装libpng
install_libpng(){
download_file "${libpng_other_link}" "${libpng_official_link}" "${libpng_filename}.tar.gz"
cd $cur_dir/soft/
tar xzvf ${libpng_filename}.tar.gz
cd ${libpng_filename}
make clean
export LDFLAGS="-L${depends_prefix}/${zlib_filename}/lib"
export CPPFLAGS="-I${depends_prefix}/${zlib_filename}/include"
error_detect "./configure --prefix=${depends_prefix}/${libpng_filename}"
error_detect "parallel_make"
error_detect "make install"
unset LDFLAGS CPPFLAGS
add_to_env "${depends_prefix}/${libpng_filename}"
create_lib64_dir "${depends_prefix}/${libpng_filename}"
}


#安装mhash
install_mhash(){
download_file "${mhash_other_link}" "${mhash_official_link}" "${mhash_filename}.tar.gz"
cd $cur_dir/soft/
tar xzvf ${mhash_filename}.tar.gz
cd ${mhash_filename}
make clean
error_detect "./configure --prefix=${depends_prefix}/${mhash_filename}"
error_detect "parallel_make"
error_detect "make install"
add_to_env "${depends_prefix}/${mhash_filename}"
create_lib64_dir "${depends_prefix}/${mhash_filename}"
}

#安装freetype
install_freetype(){
download_file "${freetype_other_link}" "${freetype_official_link}" "${freetype_filename}.tar.gz"
cd $cur_dir/soft/
tar xzvf ${freetype_filename}.tar.gz
cd ${freetype_filename}
make clean
error_detect "./configure --prefix=${depends_prefix}/${freetype_filename}"
error_detect "parallel_make"
error_detect "make install"
add_to_env "${depends_prefix}/${freetype_filename}"
create_lib64_dir "${depends_prefix}/${freetype_filename}"
}

#安装libmcrypt
install_libmcrypt(){
download_file "${libmcrypt_other_link}" "${libmcrypt_official_link}" "${libmcrypt_filename}.tar.gz"
cd $cur_dir/soft/
tar xzvf ${libmcrypt_filename}.tar.gz
cd ${libmcrypt_filename}
make clean
error_detect "./configure --prefix=${depends_prefix}/${libmcrypt_filename}"
error_detect "parallel_make"
error_detect "make install"
add_to_env "${depends_prefix}/${libmcrypt_filename}"
create_lib64_dir "${depends_prefix}/${libmcrypt_filename}"
}

#安装m4
install_m4(){
download_file "${m4_other_link}" "${m4_official_link}" "${m4_filename}.tar.gz"
cd $cur_dir/soft/
tar xzvf ${m4_filename}.tar.gz
cd ${m4_filename}
make clean
error_detect "./configure --prefix=${depends_prefix}/${m4_filename}"
error_detect "parallel_make"
error_detect "make install"
add_to_env "${depends_prefix}/${m4_filename}"
}

#安装ImageMagick
install_ImageMagick(){
download_file "${ImageMagick_other_link}" "${ImageMagick_official_link}" "${ImageMagick_filename}.tar.gz"
cd $cur_dir/soft/
tar xzvf ${ImageMagick_filename}.tar.gz
cd ${ImageMagick_filename}
error_detect "./configure --prefix=${depends_prefix}/${ImageMagick_filename}"
error_detect "parallel_make"
error_detect "make install"
#修复php-ImageMagick找不到MagickWand.h的问题
cd ${depends_prefix}/${ImageMagick_filename}/include
ln -s ImageMagick-6 ImageMagick
add_to_env "${depends_prefix}/${ImageMagick_filename}"
}

#安装pkgconfig
install_pkgconfig(){
download_file "${pkgconfig_other_link}" "${pkgconfig_official_link}" "${pkgconfig_filename}.tar.gz"
cd $cur_dir/soft/
tar xzvf ${pkgconfig_filename}.tar.gz
cd ${pkgconfig_filename}
error_detect "./configure --prefix=${depends_prefix}/${pkgconfig_filename}"
error_detect "parallel_make"
error_detect "make install"
add_to_env "${depends_prefix}/${pkgconfig_filename}"
}

#添加必要的环境变量
add_to_env(){
local location=$1
cd ${location} && [ ! -d lib ] && [ -d lib64 ] && ln -s lib64 lib
[ -d "${location}/lib" ] && export LD_LIBRARY_PATH=${location}/lib:$LD_LIBRARY_PATH
[ -d "${location}/bin" ] &&	export PATH=${location}/bin:$PATH
}

#测试元素是否在数组里
if_in_array(){
local element=$1
local array=$2
for i in $array
do
	if [ "$i" == "$element" ];then
		return 0
	fi
done
return 1
}

#判断php版本
check_php_version(){
local location=$1
$location/bin/php -v | grep -q -i -E "php[ ]+5\.2" && echo "5.2"
$location/bin/php -v | grep -q -i -E "php[ ]+5\.3" && echo "5.3"
$location/bin/php -v | grep -q -i -E "php[ ]+5\.4" && echo "5.4"
}


#安装libevent
install_libevent(){
download_file "${libevent_other_link}" "${libevent_official_link}" "${libevent_filename}.tar.gz"
cd $cur_dir/soft/
tar xzvf ${libevent_filename}.tar.gz
cd ${libevent_filename}
make clean
error_detect "./configure --prefix=${depends_prefix}/${libevent_filename}"
error_detect "parallel_make"
error_detect "make install"
add_to_env "${depends_prefix}/${libevent_filename}"
}

#检测是否安装，存在就不安装了
check_installed(){
local command=$1
local location=$2
if [ -d "$location" ];then
	echo "$location found,skip the installation."
	add_to_env "$location"
else
	${command}
fi
}

#检测是否安装,带确认对话
check_installed_ask(){
local command=$1
local location=$2
if [ -d "$location" ];then
	#发现路径存在，是否删除安装
	yes_or_no "directory $location found,may be the software had installed,remove it and reinstall it [N/y]: " "rm -rf $location && ${command}" "echo 'do not reinstall this software.' "
else
	${command}
fi
}

#获取版本号
VersionGet(){
	grep -oE  "[0-9.]+" /etc/issue
}

#判断centos版本
CentOSVerCheck(){
	local code=$1
	local version="`VersionGet`"
	local main_ver=${version%.*}
	if [ $main_ver == $code ];then
		return 0
	else
		return 1
	fi		
}

#安装php依赖
install_php_depends(){
	#安装libiconv
	if [ ! -f "/usr/lib/libiconv.so" ] && [ ! -f "/usr/lib64/libiconv.so" ];then
		install_libiconv
	fi
	
	#安装依赖
	if [ "`check_sys_version`" == "debian" ];then
		local packages=(m4 autoconf libcurl4-gnutls-dev  autoconf2.13 libxml2-dev openssl zlib1g-dev libpcre3-dev libtool libjpeg-dev libpng12-dev libfreetype6-dev libmhash-dev libmcrypt-dev libssl-dev)
		for p in ${packages[@]}
		do
			apt-get -y install $p
		done
		create_lib_link "libjpeg.so"
		create_lib_link "libpng.so"
		create_lib_link "libltdl.so"
		create_lib_link "libmcrypt.so"
		create_lib_link "libiconv.so"
		create_lib_link "libiconv.so.2"
	elif [ "`check_sys_version`" == "centos" ];then
		yum -y install m4 autoconf libxml2-devel openssl openssl-devel  zlib-devel curl-devel pcre-devel libtool-libs libtool-ltdl-devel libjpeg-devel libpng-devel freetype-devel mhash-devel libmcrypt-devel
		create_lib_link "libjpeg.so"
		create_lib_link "libpng.so"
		create_lib_link "libltdl.so"
		create_lib_link "libmcrypt.so"
		create_lib_link "libiconv.so"
		create_lib_link "libiconv.so.2"
		#解决centos 6 libmcrypt和libmhash不在在的问题
		if CentOSVerCheck 6;then
			if is_64bit; then
				rpm -i $cur_dir/conf/libmcrypt-2.5.7-1.2.el6.rf.x86_64.rpm
				rpm -i $cur_dir/conf/libmcrypt-devel-2.5.7-1.2.el6.rf.x86_64.rpm
				rpm -i $cur_dir/conf/mhash-0.9.9.9-3.el6.x86_64.rpm
				rpm -i $cur_dir/conf/mhash-devel-0.9.9.9-3.el6.x86_64.rpm
			else
				rpm -i $cur_dir/conf/libmcrypt-2.5.7-1.2.el6.rf.i686.rpm
				rpm -i $cur_dir/conf/libmcrypt-devel-2.5.7-1.2.el6.rf.i686.rpm
				rpm -i $cur_dir/conf/mhash-0.9.9.9-3.el6.i686.rpm
				rpm -i $cur_dir/conf/mhash-devel-0.9.9.9-3.el6.i686.rpm
			fi	
		fi			
	else
		check_installed "install_m4" "${depends_prefix}/${m4_filename}"
		check_installed "install_autoconf" "${depends_prefix}/${autoconf_filename}"
		check_installed "install_libxml2" "${depends_prefix}/${libxml2_filename}"
		check_installed "install_openssl" "${depends_prefix}/${openssl_filename}"
		check_installed "install_zlib " "${depends_prefix}/${zlib_filename}"
		check_installed "install_curl" "${depends_prefix}/${libcurl_filename}"
		check_installed "install_pcre" "${depends_prefix}/${pcre_filename}"
		check_installed "install_libtool" "${depends_prefix}/${libtool_filename}"
		check_installed "install_libjpeg" "${depends_prefix}/${libjpeg_filename}"
		check_installed "install_libpng" "${depends_prefix}/${libpng_filename}"
		check_installed "install_freetype" "${depends_prefix}/${freetype_filename}"
		check_installed "install_mhash " "${depends_prefix}/${mhash_filename}"
		check_installed "install_libmcrypt" "${depends_prefix}/${libmcrypt_filename}"
	fi

}

#在/usr/lib创建库文件的链接
create_lib_link(){
        local lib=$1
        if [ ! -s "/usr/lib64/$lib" ] && [ ! -s "/usr/lib/$lib" ];then
                libdir=$(find /usr -name "$lib" | awk 'NR==1{print}')
                if [ "$libdir" != "" ];then
                        if is_64bit;then
				mkdir /usr/lib64
                                ln -s $libdir /usr/lib64/$lib
                                ln -s $libdir /usr/lib/$lib
                        else
                                ln -s $libdir /usr/lib/$lib
                        fi
                fi
        fi
        if is_64bit;then
		mkdir /usr/lib64
                [ ! -s "/usr/lib64/$lib" ] && [ -s "/usr/lib/$lib" ] && ln -s /usr/lib/${lib}  /usr/lib64/${lib}
                [ ! -s "/usr/lib/$lib" ] && [ -s "/usr/lib64/$lib" ] && ln -s /usr/lib64/${lib} /usr/lib/${lib}
        fi
}

#在64位时需要创建lib64目录
create_lib64_dir(){
	local dir=$1
	if is_64bit;then
		if [ -s "$dir/lib/" ] && [ ! -s  "$dir/lib64/" ];then
			cd $dir
			ln -s lib lib64
		fi		
	fi	
}

#显示菜单
display_menu(){
local soft=$1
local prompt="which ${soft} you'd select: "
eval local arr=(\${${soft}_arr[@]})
while true
do
	echo -e "#################### ${soft} setting ####################\n\n"
	for ((i=1;i<=${#arr[@]};i++ )); do echo -e "$i) ${arr[$i-1]}"; done
	echo
	read -p "${prompt}" $soft
	eval local select=\$$soft
	if [ "$select" == "" ] || [ "${arr[$soft-1]}" == ""  ];then
		prompt="input errors,please input a number: "
	else
		eval $soft=${arr[$soft-1]}
		eval echo "your selection: \$$soft"             
		break
	fi
done
}

#安装nginx
install_nginx(){
#安装pcre
download_file "${pcre_other_link}" "${pcre_official_link}" "${pcre_filename}.tar.gz"
cd $cur_dir/soft/
tar xzvf ${pcre_filename}.tar.gz
#安装openssl
download_file "${openssl_other_link}" "${openssl_official_link}" "${openssl_filename}.tar.gz"
cd $cur_dir/soft/
tar xzvf ${openssl_filename}.tar.gz
#安装zlib
download_file "${zlib_other_link}" "${zlib_official_link}" "${zlib_filename}.tar.gz"
cd $cur_dir/soft/
tar xzvf ${zlib_filename}.tar.gz

if [ "$nginx" == "${nginx_filename}" ];then
	download_file "${nginx_other_link}" "${nginx_official_link}" "${nginx_filename}.tar.gz"
	cd $cur_dir/soft/
	tar xvzf ${nginx_filename}.tar.gz
	cd ${nginx_filename}
	make clean
	error_detect "./configure ${nginx_configure_args}"
	error_detect "make"
	error_detect "make install"

elif [ "$nginx" == "${tengine_filename}" ];then
	download_file "${tengine_other_link}" "${tengine_official_link}" "${tengine_filename}.tar.gz"
	cd $cur_dir/soft/
	tar xzvf ${tengine_filename}.tar.gz
	cd ${tengine_filename}
	make clean
	error_detect "./configure ${nginx_configure_args}"
	error_detect "make"
	error_detect "make install"
	
elif [ "$nginx" == "${openresty_filename}" ];then
	download_file "${openresty_other_link}" "${openresty_official_link}" "${openresty_filename}.tar.gz"
	cd $cur_dir/soft/
	tar xzvf ${openresty_filename}.tar.gz
	cd ${openresty_filename}
	make clean	
	error_detect "./configure ${nginx_configure_args}"
	error_detect "make"
	error_detect "make install"
	#openresty的nginx路径会在下一级nginx目录
	nginx_location=${nginx_location}/nginx
fi

#配置nginx
config_nginx
#记录nginx安装位置
echo "nginx_location=$nginx_location" >> /tmp/ezhttp_info_do_not_del
}

#配置nginx
config_nginx(){
groupadd www	
useradd -s /bin/false -g www www
mkdir -p ${nginx_location}/conf/vhost
mkdir -p /home/wwwroot/
\cp  -a $cur_dir/conf/rewrite ${nginx_location}/conf/
rm -f /etc/init.d/nginx
\cp  -f $cur_dir/conf/init.d.nginx /etc/init.d/nginx
sed -i "s#^nginx_location=.*#nginx_location=$nginx_location#" /etc/init.d/nginx
chmod +x /etc/init.d/nginx
\cp  $cur_dir/conf/index.html /home/wwwroot/
\cp  $cur_dir/conf/tz.php /home/wwwroot/
\cp  $cur_dir/conf/p.php /home/wwwroot/
boot_start nginx
mv ${nginx_location}/conf/nginx.conf ${nginx_location}/conf/nginx.conf_bak

if [ "$stack" == "lnamp" ];then
	\cp  -f $cur_dir/conf/nginx-lnamp.conf ${nginx_location}/conf/nginx.conf
	\cp -f $cur_dir/conf/proxy.conf ${nginx_location}/conf/
else	
	\cp  -f $cur_dir/conf/nginx.conf ${nginx_location}/conf/
fi	
}

#安装apache
install_apache(){
#安装依赖
if [ "`check_sys_version`" == "debian" ];then
	apt-get -y install libssl-dev
elif [ "`check_sys_version`" == "centos" ];then
	yum -y install zlib-devel openssl-devel
else
	check_installed "install_zlib " "${depends_prefix}/${zlib_filename}"
	check_installed "install_openssl" "${depends_prefix}/${openssl_filename}"
fi	


if [ "$apache" == "${apache2_2_filename}" ];then	
	download_file "${apache2_2_other_link}" "${apache2_2_official_link}" "${apache2_2_filename}.tar.gz"
	cd $cur_dir/soft/
	tar xzvf ${apache2_2_filename}.tar.gz
	cd ${apache2_2_filename}
	#解决SSL_PROTOCOL_SSLV2’ undeclared问题
	if grep -q -i "Ubuntu 12.04" /etc/issue;then
		sed -i '/SSL_PROTOCOL_SSLV2/d' $cur_dir/soft/${apache2_2_filename}/modules/ssl/ssl_engine_io.c
	fi 	
	make clean
	export LDFLAGS=-ldl
	error_detect "./configure $apache_configure_args"
	error_detect "parallel_make"
	error_detect "make install"
	unset LDFLAGS
	config_apache 2.2

elif [ "$apache" == "${apache2_4_filename}" ];then
	#安装依赖
	if [ "`check_sys_version`" == "debian" ];then
		apt-get -y install libpcre3-dev
	elif [ "`check_sys_version`" == "centos" ];then
		yum install -y pcre-devel
	else
		check_installed "install_pcre" "${depends_prefix}/${pcre_filename}"
	fi		

	#下载apr和apr-util
	download_file "${apr_other_link}" "${apr_official_link}" "${apr_filename}.tar.gz"
	cd $cur_dir/soft/
	tar xzvf ${apr_filename}.tar.gz
	download_file "${apr_util_other_link}" "${apr_util_official_link}" "${apr_util_filename}.tar.gz"
	cd $cur_dir/soft/
	tar xzvf ${apr_util_filename}.tar.gz

	download_file "${apache2_4_other_link}" "${apache2_4_official_link}" "${apache2_4_filename}.tar.gz"
	cd $cur_dir/soft/
	tar xzvf ${apache2_4_filename}.tar.gz
	cd ${apache2_4_filename}
	\cp  -a ${cur_dir}/soft/${apr_filename} srclib/apr
	\cp  -a ${cur_dir}/soft/${apr_util_filename} srclib/apr-util
	make clean
	error_detect "./configure $apache_configure_args"
	error_detect "parallel_make"
	error_detect "make install"
	config_apache 2.4
fi
#记录apache安装位置
echo "apache_location=$apache_location" >> /tmp/ezhttp_info_do_not_del
#清除openssl的LD_LIBRARY_PATH，以后出现no version information available
LD_LIBRARY_PATH=$(echo $LD_LIBRARY_PATH | sed "s#${depends_prefix}/${pcre_filename}:##")
export LD_LIBRARY_PATH
}

#配置apache
config_apache(){
groupadd www	
useradd -s /bin/false -g www www
mkdir -p /home/wwwroot
local version=$1
\cp  -f ${apache_location}/conf/httpd.conf ${apache_location}/conf/httpd.conf_bak
grep -E -q "^\s*#\s*Include conf/extra/httpd-vhosts.conf" ${apache_location}/conf/httpd.conf  && sed -i 's#^\s*\#\s*Include conf/extra/httpd-vhosts.conf#Include conf/extra/httpd-vhosts.conf#' ${apache_location}/conf/httpd.conf || sed -i '$aInclude conf/extra/httpd-vhosts.conf' ${apache_location}/conf/httpd.conf
mv ${apache_location}/conf/extra/httpd-vhosts.conf ${apache_location}/conf/extra/httpd-vhosts.conf_bak
mkdir -p ${apache_location}/conf/vhost/

if [ "$stack" == "lnamp" ];then
	sed -i 's/Listen\s*80/Listen 127.0.0.1:88/' ${apache_location}/conf/httpd.conf
	listen="127.0.0.1:88"
else
	listen="*:80"
fi

#写入默认虚拟主机配置
cat > ${apache_location}/conf/extra/httpd-vhosts.conf << EOF
NameVirtualHost ${listen}
<VirtualHost ${listen}>
ServerName localhost
ServerAlias localhost
DocumentRoot /home/wwwroot/
DirectoryIndex index.php index.html index.htm
<Directory /home/wwwroot/>
Options +Includes -Indexes
AllowOverride All
Order Deny,Allow
Allow from All
php_admin_value open_basedir /home/wwwroot/:/tmp:/proc
</Directory>
</VirtualHost>
Include ${apache_location}/conf/vhost/*.conf
EOF

#设置运行用户为www
sed -i 's/^User.*/User www/i' ${apache_location}/conf/httpd.conf
sed -i 's/^Group.*/Group www/i' ${apache_location}/conf/httpd.conf

#开启几个模块
sed -i -r 's/^#(.*mod_rewrite.so)/\1/' ${apache_location}/conf/httpd.conf
sed -i -r 's/^#(.*mod_deflate.so)/\1/' ${apache_location}/conf/httpd.conf
sed -i -r 's/^#(.*mod_expires.so)/\1/' ${apache_location}/conf/httpd.conf
sed -i -r 's/^#(.*mod_ssl.so)/\1/' ${apache_location}/conf/httpd.conf

#apache 2.4需要特别处理
if [ $version == "2.4" ];then
	sed -i '/NameVirtualHost/d' ${apache_location}/conf/extra/httpd-vhosts.conf
	sed -i 's/Allow from All/Require all granted/' ${apache_location}/conf/extra/httpd-vhosts.conf
	sed -i 's/^Include/IncludeOptional/' ${apache_location}/conf/extra/httpd-vhosts.conf
fi

rm -f /etc/init.d/httpd
\cp  -f $cur_dir/conf/init.d.httpd /etc/init.d/httpd
sed -i "s#^apache_location=.*#apache_location=$apache_location#" /etc/init.d/httpd
sed -i "s#^apache_location=.*#apache_location=$apache_location#" /etc/init.d/httpd
chmod +x /etc/init.d/httpd

\cp  $cur_dir/conf/index.html /home/wwwroot/
\cp  $cur_dir/conf/tz.php /home/wwwroot/
\cp  $cur_dir/conf/p.php /home/wwwroot/

boot_start httpd
}

#安装mysql server
install_mysqld(){
if [ "$mysql" == "${mysql5_1_filename}" ];then

	#安装依赖
	if [ "`check_sys_version`" == "debian" ];then
		apt-get -y install libncurses5-dev
	elif [ "`check_sys_version`" == "centos" ];then
		yum -y install ncurses-devel
	else
		check_installed "install_ncurses" "${depends_prefix}/${ncurses_filename}"
	fi	

	download_file "${mysql5_1_other_link}" "${mysql5_1_official_link}" "${mysql5_1_filename}.tar.gz"
	cd $cur_dir/soft/
	tar xzvf ${mysql5_1_filename}.tar.gz
	cd ${mysql5_1_filename}
	make clean

	if package_support;then
		other_option=""
	else
		other_option="--with-named-curses-libs=${depends_prefix}/${ncurses_filename2}/lib/libncurses.a"
	fi	
	error_detect "./configure ${mysql_configure_args}"
	error_detect "parallel_make"
	error_detect "make install"
	config_mysql 5.1

elif [ "$mysql" == "${mysql5_5_filename}" ] || [ "$mysql" == "libmysqlclient18" ];then
	#安装依赖
	if [ "`check_sys_version`" == "debian" ];then
		apt-get -y install libncurses5-dev cmake m4 bison
	elif [ "`check_sys_version`" == "centos" ];then
		yum -y install ncurses-devel cmake m4 bison
	else
		check_installed "install_ncurses" "${depends_prefix}/${ncurses_filename}"
		check_installed "install_cmake" "${depends_prefix}/${cmake_filename}"
		check_installed "install_m4" "${depends_prefix}/${m4_filename}"
		check_installed "install_bison" "${depends_prefix}/${bison_filename}"
	fi		

	download_file "${mysql5_5_other_link}" "${mysql5_5_official_link}" "${mysql5_5_filename}.tar.gz"
	cd $cur_dir/soft/
	rm -rf ${mysql5_5_filename}
	tar xzvf ${mysql5_5_filename}.tar.gz
	cd ${mysql5_5_filename}
	make clean
	if package_support;then
		other_option=""
	else
		other_option="-DCURSES_LIBRARY=${depends_prefix}/${ncurses_filename}/lib/libncurses.a  -DCURSES_INCLUDE_PATH=${depends_prefix}/${ncurses_filename}/include/"
	fi		
	error_detect "cmake ${mysql_configure_args}"
	#为只编译client作处理
	if [ "$mysql" == "libmysqlclient18" ];then
		error_detect "make mysqlclient libmysql"
		mkdir -p ${mysql_location}/lib ${mysql_location}/bin
		\cp  -a libmysql/libmysqlclient* ${mysql_location}/lib
		\cp  -a scripts/mysql_config ${mysql_location}/bin
		\cp  -a include ${mysql_location}
	else	
		error_detect "parallel_make"
		error_detect "make install"
		config_mysql 5.5
	fi
	
elif [ "$mysql" == "${mysql5_6_filename}" ];then
	#安装依赖
	if [ "`check_sys_version`" == "debian" ];then
		apt-get -y install libncurses5-dev cmake m4 bison
	elif [ "`check_sys_version`" == "centos" ];then
		yum -y install ncurses-devel cmake m4 bison
	else
		check_installed "install_ncurses" "${depends_prefix}/${ncurses_filename}"
		check_installed "install_cmake" "${depends_prefix}/${cmake_filename}"
		check_installed "install_m4" "${depends_prefix}/${m4_filename}"
		check_installed "install_bison" "${depends_prefix}/${bison_filename}"
	fi		
	download_file "${mysql5_6_other_link}" "${mysql5_6_official_link}" "${mysql5_6_filename}.tar.gz"	
	cd $cur_dir/soft/
	rm -rf ${mysql5_6_filename}
	tar xzvf  ${mysql5_6_filename}.tar.gz
	cd ${mysql5_6_filename}
	make clean
	if package_support;then
		other_option=""
	else
		other_option="-DCURSES_LIBRARY=${depends_prefix}/${ncurses_filename}/lib/libncurses.a  -DCURSES_INCLUDE_PATH=${depends_prefix}/${ncurses_filename}/include/"
	fi	
	error_detect "cmake ${mysql_configure_args}"
	error_detect "parallel_make"
	error_detect "make install"
	config_mysql 5.6
fi
#记录mysql安装位置
echo "mysql_location=$mysql_location" >> /tmp/ezhttp_info_do_not_del

#解决64位系统php可能找不到mysqlclient的问题
add_to_env "${mysql_location}"
if [ -d "${mysql_location}/lib" ] && [ ! -d "${mysql_location}/lib64" ];then
	cd ${mysql_location}
	ln -s lib lib64
fi
}

#配置mysql
config_mysql(){
local version=$1
useradd -s /bin/false mysql
mkdir -p ${mysql_location}/etc/ ${mysql_data_location}
#防止mysql使用错误的my.cnf文件
mv /etc/my.cnf /etc/my.cnf_bak
mv /etc/mysql/my.cnf /etc/mysql/my.cnf_bak

if [ $version == "5.1" ];then
	rm -f /etc/init.d/mysqld
	\cp  -f ${mysql_location}/share/mysql/mysql.server /etc/init.d/mysqld	
	chmod +x /etc/init.d/mysqld
	#配置my.cnf
	\cp  -f $cur_dir/conf/my.cnf_5.1 ${mysql_location}/etc/my.cnf
	sed -i "s:#datadir.*:datadir = ${mysql_data_location}:" ${mysql_location}/etc/my.cnf
	sed -r -i "s#socket\s*=.*#socket = ${mysql_data_location}/mysql.sock#" ${mysql_location}/etc/my.cnf
	${mysql_location}/bin/mysql_install_db --basedir=${mysql_location} --datadir=${mysql_data_location}  --defaults-file=${mysql_location}/etc/my.cnf --user=mysql

elif [ $version == "5.5" ];then
	\cp  -f ${mysql_location}/support-files/mysql.server /etc/init.d/mysqld
	chmod +x /etc/init.d/mysqld
	#配置my.cnf
	\cp  -f $cur_dir/conf/my.cnf_5.5 ${mysql_location}/etc/my.cnf
	sed -i "s:#datadir.*:datadir = ${mysql_data_location}:" ${mysql_location}/etc/my.cnf
	sed -r -i "s#socket\s*=.*#socket = ${mysql_data_location}/mysql.sock#" ${mysql_location}/etc/my.cnf
	${mysql_location}/scripts/mysql_install_db --basedir=${mysql_location} --datadir=${mysql_data_location} --defaults-file=${mysql_location}/etc/my.cnf --user=mysql

elif [ $version == "5.6" ];then
	\cp  -f ${mysql_location}/support-files/mysql.server /etc/init.d/mysqld
	chmod +x /etc/init.d/mysqld
	#配置my.cnf
	\cp  -f $cur_dir/conf/my.cnf_5.6 ${mysql_location}/etc/my.cnf
	sed -i "s:#datadir.*:datadir = ${mysql_data_location}:" ${mysql_location}/etc/my.cnf
	sed -r -i "s#socket\s*=.*#socket = ${mysql_data_location}/mysql.sock#" ${mysql_location}/etc/my.cnf
	${mysql_location}/scripts/mysql_install_db --basedir=${mysql_location} --datadir=${mysql_data_location} --defaults-file=${mysql_location}/etc/my.cnf --user=mysql

fi

chown -R mysql ${mysql_location} ${mysql_data_location}
cd /usr/bin/
ln -s $mysql_location/bin/mysql
ln -s $mysql_location/bin/mysqldump
boot_start mysqld
}

#安装PHP
install_php(){
#安装php依赖
install_php_depends

#开始安装php
if [ "$php" == "${php5_2_filename}" ];then
	#安装依赖
	if [ "`check_sys_version`" == "debian" ];then
		apt-get -y install patch
	elif [ "`check_sys_version`" == "centos" ];then
		yum install -y patch
	else
		check_installed "install_patch" "${depends_prefix}/${patch_filename}"
	fi		

	download_file "${php5_2_other_link}" "${php5_2_official_link}" "${php5_2_filename}.tar.gz"
	cd $cur_dir/soft/
	rm -rf ${php5_2_filename}
	tar xzvf ${php5_2_filename}.tar.gz
	#php-fpm补丁
	gzip -cd $cur_dir/conf/${php5_2_filename}-fpm-0.5.14.diff.gz | patch -d ${php5_2_filename} -p1
	cd ${php5_2_filename}
	#hash漏洞补丁
	\cp  $cur_dir/conf/${php5_2_filename}-max-input-vars.patch ./
	patch -p1 < ${php5_2_filename}-max-input-vars.patch
	error_detect "./buildconf --force"
	error_detect "./configure ${php_configure_args}"
	if grep -q -i "Ubuntu 12.04" /etc/issue;then
		#解决SSL_PROTOCOL_SSLV2’ undeclared问题
		cd ext/openssl/
		patch -p3 < $cur_dir/conf/debian_patches_disable_SSLv2_for_openssl_1_0_0.patch
		cd ../../
	fi	
	error_detect "parallel_make ZEND_EXTRA_LIBS='-liconv'"
	error_detect "make install"
	
	#配置php
	mkdir -p $php_location/etc/
	\cp  php.ini-recommended $php_location/etc/php.ini
	sed -i "s#extension_dir.*#extension_dir = \"${php_location}/lib/php/extensions/no-debug-non-zts-20060613\"#"  $php_location/etc/php.ini
	
elif [ "$php" == "${php5_3_filename}" ];then
	download_file "${php5_3_other_link}" "${php5_3_official_link}" "${php5_3_filename}.tar.gz"
	cd $cur_dir/soft/
	tar xzvf ${php5_3_filename}.tar.gz
	cd ${php5_3_filename}
	make clean
	error_detect "./configure ${php_configure_args}"
	error_detect "parallel_make ZEND_EXTRA_LIBS='-liconv'"
	error_detect "make install"	
	
	#配置php
	mkdir -p ${php_location}/etc
	\cp  php.ini-production $php_location/etc/php.ini
	[ "$php_mode" == "with_fastcgi" ] && \cp  $php_location/etc/php-fpm.conf.default $php_location/etc/php-fpm.conf
	
elif [ "$php" == "${php5_4_filename}" ];then
	download_file "${php5_4_other_link}" "${php5_4_official_link}" "${php5_4_filename}.tar.gz"
	cd $cur_dir/soft/
	tar xzvf ${php5_4_filename}.tar.gz
	cd ${php5_4_filename}
	make clean
	error_detect "./configure ${php_configure_args}"
	error_detect "parallel_make ZEND_EXTRA_LIBS='-liconv'"
	error_detect "make install"	
	
	#配置php
	mkdir -p ${php_location}/etc
	\cp  php.ini-production $php_location/etc/php.ini	
	[ "$php_mode" == "with_fastcgi" ] && \cp  $php_location/etc/php-fpm.conf.default $php_location/etc/php-fpm.conf
fi
#记录php安装位置
echo "php_location=$php_location" >> /tmp/ezhttp_info_do_not_del
#add php support for apache
[ $php_mode == "with_apache" ] && ! grep -i "Addtype application/x-httpd-php .php" ${apache_location}/conf/httpd.conf && sed -i 's#AddType application/x-gzip .gz .tgz#AddType application/x-gzip .gz .tgz\nAddtype application/x-httpd-php .php#i' ${apache_location}/conf/httpd.conf

#配置php
config_php
}

#配置php
config_php(){
if [ "$php_mode" == "with_fastcgi" ];then	
	groupadd www	
	useradd -s /bin/false -g www www
	rm -f /etc/init.d/php-fpm
	if [ "$php" == "${php5_2_filename}" ];then
		mkdir -p ${php_location}/logs/
		\cp -f $cur_dir/conf/init.d.php-fpm5.2 /etc/init.d/php-fpm
		sed -i "s#^php_location=.*#php_location=$php_location#" /etc/init.d/php-fpm
		chmod +x /etc/init.d/php-fpm
		sed -i  's#.*<value name="user">.*#<value name="user">www</value>#' ${php_location}/etc/php-fpm.conf
		sed -i 's#127.0.0.1:9000#/tmp/php-cgi.sock#' ${php_location}/etc/php-fpm.conf

	elif [ "$php" == "${php5_3_filename}" ]; then
		\cp $cur_dir/soft/${php5_3_filename}/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm
		chmod +x /etc/init.d/php-fpm
		sed -i 's/^user =.*/user = www/' ${php_location}/etc/php-fpm.conf
		sed -i 's/^group =.*/group = www/' ${php_location}/etc/php-fpm.conf
		sed -i 's#listen = 127.0.0.1:9000#listen = /tmp/php-cgi.sock#' ${php_location}/etc/php-fpm.conf

	elif [ "$php" == "${php5_4_filename}" ]; then
		\cp $cur_dir/soft/${php5_4_filename}/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm
		chmod +x /etc/init.d/php-fpm
		sed -i 's/^user =.*/user = www/' ${php_location}/etc/php-fpm.conf
		sed -i 's/^group =.*/group = www/' ${php_location}/etc/php-fpm.conf
		sed -i 's#listen = 127.0.0.1:9000#listen = /tmp/php-cgi.sock#' ${php_location}/etc/php-fpm.conf

	fi

	boot_start php-fpm
fi

#设置php连接mysql mysql.sock的路径
sed -i "s#mysql.default_socket.*#mysql.default_socket = ${mysql_data_location}/mysql.sock#" $php_location/etc/php.ini
sed -i "s#mysqli.default_socket.*#mysqli.default_socket = ${mysql_data_location}/mysql.sock#" $php_location/etc/php.ini
sed -i "s#pdo_mysql.default_socket.*#pdo_mysql.default_socket = ${mysql_data_location}/mysql.sock#" $php_location/etc/php.ini

}
#安装php模块
install_php_modules(){
local php_prefix=$1
if_in_array "${ZendOptimizer_filename}" "$php_modules_install" && install_ZendOptimizer "$php_prefix"
if_in_array "${eaccelerator_filename}" "$php_modules_install" && install_eaccelerator "$php_prefix"
if_in_array "${xcache_filename}" "$php_modules_install" && install_xcache "$php_prefix"
if_in_array "${php_imagemagick_filename}" "$php_modules_install" && install_php_imagesmagick "$php_prefix"
if_in_array "${php_memcache_filename}" "$php_modules_install" && install_php_memcache "$php_prefix"
if_in_array "${ZendGuardLoader_filename}" "$php_modules_install" && install_ZendGuardLoader "$php_prefix"
if_in_array "${ionCube_filename}" "$php_modules_install" && install_ionCube "$php_prefix"
if_in_array "${php_redis_filename}" "$php_modules_install" && install_php_redis "$php_prefix"
if_in_array "${php_mongo_filename}" "$php_modules_install" && install_php_mongo "$php_prefix"
if_in_array "${apc_filename}" "$php_modules_install" && install_php_apc "$php_prefix"
}

#安装ZendOptimizer
install_ZendOptimizer()
{
local php_prefix=$1	
#如果是64位系统
if is_64bit ; then
	download_file "${ZendOptimizer64_other_link}" "${ZendOptimizer64_official_link}" "${ZendOptimizer64_filename}.tar.gz"
	cd $cur_dir/soft/
	tar xzvf ${ZendOptimizer64_filename}.tar.gz
	mkdir -p ${depends_prefix}/ZendOptimizer
	cp -a ${ZendOptimizer64_filename}/data/5_2_x_comp/ZendOptimizer.so ${depends_prefix}/ZendOptimizer
else
	download_file "${ZendOptimizer32_other_link}" "${ZendOptimizer32_official_link}" "${ZendOptimizer32_filename}.tar.gz"
	cd $cur_dir/soft/
	tar xzvf ${ZendOptimizer32_filename}.tar.gz
	mkdir -p ${depends_prefix}/ZendOptimizer
	cp -a ${ZendOptimizer32_filename}/data/5_2_x_comp/ZendOptimizer.so ${depends_prefix}/ZendOptimizer
fi

#配置php.ini
! grep -q "\[zend_optimizer\]" ${php_prefix}/etc/php.ini  && sed -i "\$a\[zend_optimizer]\nzend_optimizer.optimization_level=15\nzend_extension=${depends_prefix}/ZendOptimizer/ZendOptimizer.so\n" ${php_prefix}/etc/php.ini 
}


#安装eaccelerator
install_eaccelerator(){
#安装依赖
if [ "`check_sys_version`" == "debian" ];then
	apt-get -y install m4 autoconf
elif [ "`check_sys_version`" == "centos" ];then
	yum -y install m4 autoconf
else
	check_installed "install_m4" "${depends_prefix}/${m4_filename}"
	check_installed "install_autoconf" "${depends_prefix}/${autoconf_filename}"	
fi		

local php_prefix=$1
download_file "${eaccelerator_other_link}" "${eaccelerator_official_link}" "${eaccelerator_filename}.tar.bz2"
cd $cur_dir/soft/
rm -rf ${eaccelerator_filename}
tar xjfv ${eaccelerator_filename}.tar.bz2
cd ${eaccelerator_filename}
make clean
error_detect "${php_prefix}/bin/phpize"
error_detect "./configure --enable-shared --with-php-config=$php_prefix/bin/php-config"
error_detect "make"
error_detect "make install"
EXTENSION_DIR=`awk -F"= " '/^EXTENSION_DIR/{print $2}' Makefile`

#配置php.ini
! grep -q "\[eaccelerator\]" ${php_prefix}/etc/php.ini && sed -i "/^\[zend_optimizer]\$/i\[eaccelerator]\nzend_extension=\"${EXTENSION_DIR}/eaccelerator.so\"\neaccelerator.cache_dir = \"/var/cache/eaccelerator\"" ${php_prefix}/etc/php.ini

#判断是否已经加上，有可能会因为没有安装zend optimizer而配置失败
! grep -q  "\[eaccelerator\]" ${php_prefix}/etc/php.ini && sed -i "\$a\[eaccelerator]\nzend_extension=\"${EXTENSION_DIR}/eaccelerator.so\"\neaccelerator.cache_dir = \"/var/cache/eaccelerator\"\n" ${php_prefix}/etc/php.ini

#配置缓存目录
mkdir -p /var/cache/eaccelerator
chmod 0777 /var/cache/eaccelerator
}

#安装xcache
install_xcache(){
local php_prefix=$1
download_file "${xcache_other_link}" "${xcache_official_link}" "${xcache_filename}.tar.gz"
cd $cur_dir/soft/
rm -rf ${xcache_filename}
tar xzvf ${xcache_filename}.tar.gz
cd ${xcache_filename}
error_detect "${php_prefix}/bin/phpize"
error_detect "../${xcache_filename}/configure --enable-xcache --enable-xcache-constant --with-php-config=${php_prefix}/bin/php-config"
error_detect "make"
error_detect "make install"
EXTENSION_DIR=`awk -F"= " '/^EXTENSION_DIR/{print $2}' Makefile`
#配置php.ini
! grep -q "\[xcache\]" ${php_prefix}/etc/php.ini && sed -i '$a\[xcache]\nextension=xcache.so\n' ${php_prefix}/etc/php.ini 
}

#安装php-memcache
install_php_memcache(){
#安装依赖
if [ "`check_sys_version`" == "debian" ];then
	apt-get -y install zlib1g-dev m4 autoconf
elif [ "`check_sys_version`" == "centos" ];then
	yum install -y zlib-devel m4 autoconf
else
	check_installed "install_zlib " "${depends_prefix}/${zlib_filename}"
	check_installed "install_m4" "${depends_prefix}/${m4_filename}"
	check_installed "install_autoconf" "${depends_prefix}/${autoconf_filename}"
fi		

local php_prefix=$1
download_file "${php_memcache_other_link}" "${php_memcache_official_link}" "${php_memcache_filename}.tgz"
cd $cur_dir/soft/
rm -rf ${php_memcache_filename}
tar xzvf ${php_memcache_filename}.tgz
cd ${php_memcache_filename}
error_detect "${php_prefix}/bin/phpize"
if package_support;then
	other_option=""
else
	other_option="--with-zlib-dir=${depends_prefix}/${zlib_filename}"
fi
error_detect "./configure --enable-memcache --with-php-config=$php_prefix/bin/php-config $other_option"
error_detect "make"
error_detect "make install"
! grep -q  "\[memcache\]" ${php_prefix}/etc/php.ini && sed -i '$a\[memcache]\nextension=memcache.so\n' ${php_prefix}/etc/php.ini 
}

#安装php redis模块
install_php_redis(){
local php_prefix=$1
download_file "${php_redis_other_link}" "${php_redis_official_link}" "${php_redis_filename}.tgz"
cd $cur_dir/soft/
rm -rf ${php_redis_filename}
tar xzvf ${php_redis_filename}.tgz
cd ${php_redis_filename}
error_detect "${php_prefix}/bin/phpize"
error_detect "./configure --enable-redis --with-php-config=$php_prefix/bin/php-config"
error_detect "make"
error_detect "make install"
! grep -q  "\[redis\]" ${php_prefix}/etc/php.ini && sed -i '$a\[redis]\nextension=redis.so\n' ${php_prefix}/etc/php.ini 
}

#安装php mongo模块
install_php_mongo(){
local php_prefix=$1
download_file "${php_mongo_other_link}" "${php_mongo_official_link}" "${php_mongo_filename}.tar.gz"
cd $cur_dir/soft/
rm -rf ${php_mongo_filename}
tar xzvf ${php_mongo_filename}.tar.gz
cd ${php_mongo_filename}
error_detect "${php_prefix}/bin/phpize"
error_detect "./configure --enable-mongo --with-php-config=$php_prefix/bin/php-config"
error_detect "make"
error_detect "make install"
! grep -q  "\[mongo\]" ${php_prefix}/etc/php.ini && sed -i '$a\[mongo]\nextension=mongo.so\n' ${php_prefix}/etc/php.ini 
}

#安装apc模块
install_php_apc(){
local php_prefix=$1
download_file "${apc_other_link}" "${apc_official_link}" "${apc_filename}.tgz"
cd $cur_dir/soft/
rm -rf ${apc_filename}
tar xzvf ${apc_filename}.tgz
cd ${apc_filename}
error_detect "${php_prefix}/bin/phpize"
error_detect "./configure --enable-apc --with-php-config=$php_prefix/bin/php-config"
error_detect "make"
error_detect "make install"
! grep -q  "\[apc\]" ${php_prefix}/etc/php.ini && sed -i '$a\[apc]\nextension=apc.so\n' ${php_prefix}/etc/php.ini
}

#安装php ImageMagick
install_php_imagesmagick(){
#安装依赖
check_installed "install_ImageMagick" "${depends_prefix}/${ImageMagick_filename}"
if [ "`check_sys_version`" == "debian" ];then
	apt-get -y install m4 autoconf pkg-config
elif [ "`check_sys_version`" == "centos" ];then
	yum -y install pkgconfig m4 autoconf
else
	check_installed "install_pkgconfig" "${depends_prefix}/${pkgconfig_filename}"
	check_installed "install_m4" "${depends_prefix}/${m4_filename}"
	check_installed "install_autoconf" "${depends_prefix}/${autoconf_filename}"

fi	

export PKG_CONFIG_PATH=${depends_prefix}/${ImageMagick_filename}/lib/pkgconfig/
local php_prefix=$1
download_file "${php_imagemagick_other_link}" "${php_imagemagick_official_link}" "${php_imagemagick_filename}.tgz"
cd $cur_dir/soft/
rm -rf ${php_imagemagick_filename}
tar xzvf ${php_imagemagick_filename}.tgz
cd ${php_imagemagick_filename}
error_detect "${php_prefix}/bin/phpize"
error_detect "./configure --with-php-config=$php_prefix/bin/php-config --with-imagick=${depends_prefix}/${ImageMagick_filename}"
error_detect "make"
error_detect "make install"
! grep -q  "\[imagick\]" ${php_prefix}/etc/php.ini && sed -i '$a\[imagick]\nextension=imagick.so\n' ${php_prefix}/etc/php.ini 
}


#安装ionCube
install_ionCube(){
local php_prefix=$1
if is_64bit ; then
	download_file "${ionCube64_other_link}" "${ionCube64_official_link}" "${ionCube64_filename}.tar.gz"
	cd $cur_dir/soft/
	tar xzvf ${ionCube64_filename}.tar.gz
	mkdir -p ${depends_prefix}/ioncube
	php_version=`check_php_version "$php_prefix"`
	cp ioncube/ioncube_loader_lin_${php_version}.so ${depends_prefix}/ioncube/ioncube.so
else
	download_file "${ionCube32_other_link}" "${ionCube32_official_link}" "${ionCube32_filename}.tar.gz"
	cd $cur_dir/soft/
	tar xzvf ${ionCube32_filename}.tar.gz
	mkdir -p ${depends_prefix}/ioncube
	php_version=`check_php_version "$php_prefix"`
	cp ioncube/ioncube_loader_lin_${php_version}.so ${depends_prefix}/ioncube/ioncube.so
fi
! grep -q  "\[ionCube Loader\]" ${php_prefix}/etc/php.ini && sed -i "/End/a\[ionCube Loader\]\nzend_extension=\"/opt/ezhttp/ioncube/ioncube.so\"\n" ${php_prefix}/etc/php.ini
}


#安装ZendGuardLoader
install_ZendGuardLoader(){
local php_prefix=$1
php_version=`check_php_version "$php_prefix"`
if is_64bit ; then
	if [ "$php_version" == "5.3" ];then
		download_file "${ZendGuardLoader53_64_other_link}" "${ZendGuardLoader53_64_official_link}" "${ZendGuardLoader53_64_filename}.tar.gz"
		cd $cur_dir/soft/
		tar xzvf ${ZendGuardLoader53_64_filename}.tar.gz
		mkdir -p ${depends_prefix}/ZendGuardLoader
		cp ${ZendGuardLoader53_64_filename}/php-5.3.x/ZendGuardLoader.so ${depends_prefix}/ZendGuardLoader/
	elif [ "$php_version" == "5.4" ];then
		download_file "${ZendGuardLoader54_64_other_link}" "${ZendGuardLoader54_64_official_link}" "${ZendGuardLoader54_64_filename}.tar.gz"
		cd $cur_dir/soft/
		tar xzvf ${ZendGuardLoader54_64_filename}.tar.gz
		mkdir -p ${depends_prefix}/ZendGuardLoader
		cp ${ZendGuardLoader54_64_filename}/php-5.4.x/ZendGuardLoader.so ${depends_prefix}/ZendGuardLoader/		
	fi
else
	if [ "$php_version" == "5.3" ];then
		download_file "${ZendGuardLoader53_32_other_link}" "${ZendGuardLoader53_32_official_link}" "${ZendGuardLoader53_32_filename}.tar.gz"
		cd $cur_dir/soft/
		tar xzvf ${ZendGuardLoader53_32_filename}.tar.gz
		mkdir -p ${depends_prefix}/ZendGuardLoader
		cp ${ZendGuardLoader53_32_filename}/php-5.3.x/ZendGuardLoader.so ${depends_prefix}/ZendGuardLoader/
	elif [ "$php_version" == "5.4" ];then
		download_file "${ZendGuardLoader54_32_other_link}" "${ZendGuardLoader54_32_official_link}" "${ZendGuardLoader54_32_filename}.tar.gz"
		cd $cur_dir/soft/
		tar xzvf ${ZendGuardLoader54_32_filename}.tar.gz
		mkdir -p ${depends_prefix}/ZendGuardLoader
		cp ${ZendGuardLoader54_32_filename}/php-5.4.x/ZendGuardLoader.so ${depends_prefix}/ZendGuardLoader/	
	fi
fi

! grep -q  "\[ZendGuardLoader\]" ${php_prefix}/etc/php.ini && sed -i "/End/a\[ZendGuardLoader\]\nzend_extension=\"/${depends_prefix}/ZendGuardLoader/ZendGuardLoader.so\"\n" ${php_prefix}/etc/php.ini

}

#安装其它软件
install_other_soft(){
if_in_array "${memcached_filename}" "$other_soft_install" && install_Memcached
if_in_array "${PureFTPd_filename}" "$other_soft_install" && install_PureFTPd
if_in_array "${phpMyAdmin_filename}" "$other_soft_install" && install_phpmyadmin
}

#安装memcached
install_Memcached(){
#安装依赖
if [ "`check_sys_version`" == "debian" ];then
	apt-get -y install libevent-dev
elif [ "`check_sys_version`" == "centos" ];then
	yum -y install libevent-devel
else
	check_installed "install_libevent" "${depends_prefix}/${libevent_filename}"
fi		

download_file "${memcached_other_link}" "${memcached_official_link}" "${memcached_filename}.tar.gz"
cd $cur_dir/soft/
tar xzvf ${memcached_filename}.tar.gz
cd ${memcached_filename}
make clean
if package_support;then
	other_option=""
else
	other_option="--with-libevent=${depends_prefix}/${libevent_filename}"
fi
error_detect "./configure --prefix=$memcached_location $other_option"
error_detect "parallel_make"
error_detect "make install"
rm -f /etc/init.d/memcached
cp $cur_dir/conf/memcached-init /etc/init.d/memcached
chmod +x /etc/init.d/memcached
sed -i "s#^memcached_location=.*#memcached_location=$memcached_location#" /etc/init.d/memcached
mkdir -p /var/lock/subsys/
echo "memcached_location=$memcached_location" >> /tmp/ezhttp_info_do_not_del
boot_start memcached
}

#安装phpMyAdmin
install_phpmyadmin(){
download_file "${phpMyAdmin_other_link}" "${phpMyAdmin_official_link}" "${phpMyAdmin_filename}.tar.gz"
cd $cur_dir/soft/
tar xzvf ${phpMyAdmin_filename}.tar.gz
[ ! -d $phpmyadmin_location ] && mv ${phpMyAdmin_filename} $phpmyadmin_location
#禁用phpmyadmin自动在线检测版本功能，因为在国内有时无法访问检测版本的链接，会导致超时，影响phpmyadmin操作。
sed -i '1aexit;' $phpmyadmin_location/version_check.php
}

#安装PureFTPd
install_PureFTPd(){
download_file "${PureFTPd_other_link}" "${PureFTPd_official_link}" "${PureFTPd_filename}.tar.gz"
cd $cur_dir/soft/
tar xzvf ${PureFTPd_filename}.tar.gz
cd ${PureFTPd_filename}
error_detect "./configure --prefix=$pureftpd_location"
error_detect "parallel_make"
error_detect "make install"
mkdir -p $pureftpd_location/etc
cp -f configuration-file/pure-config.pl $pureftpd_location/bin/pure-config.pl
cp -f configuration-file/pure-ftpd.conf $pureftpd_location/etc
rm -f /etc/init.d/pureftpd
cp -f $cur_dir/conf/init.d.pureftpd /etc/init.d/pureftpd
chmod +x /etc/init.d/pureftpd
sed -i "s#^pureftpd_location=.*#pureftpd_location=$pureftpd_location#" /etc/init.d/pureftpd
sed -i "s#\${exec_prefix}#$pureftpd_location#" $pureftpd_location/bin/pure-config.pl
chmod +x ${pureftpd_location}/bin/pure-config.pl
echo "pureftpd_location=$pureftpd_location" >> /tmp/ezhttp_info_do_not_del
boot_start pureftpd
}

#提示是否使用上一次的设置
if_use_previous_setting(){
if [ -s "/root/previous_setting" ];then
	#是否使用上次设置安装
	yes_or_no "previous settings found,would you like using the  previous settings from the file /root/previous_setting [Y/n]: " "install_with_pre_settings" "rm -f /root/previous_setting;lanmp_menu"
else
	lanmp_menu
fi

}

#使用上次配置安装
install_with_pre_settings(){
. /root/previous_setting
if [ "$stack" == "lnmp" ];then
	install_lnmp
elif [ "$stack" == "lamp" ];then
	install_lamp
elif [ "$stack" == "lnamp" ];then
	install_lnamp
else
	echo "stack variable not found,exit"
	exit 1
fi	
}

#lanmp菜单
lanmp_menu(){
	echo -e "1) LNMP(Nginx MySQL PHP)\n2) LAMP(Apache MySQL PHP)\n3) LNAMP(Nginx Apache MySQL PHP)\n4) back to main menu\n"
	while true
	do
		read -p "please input the package you like to install: " package
		case $package in
			 1) preinstall_lnmp;install_lnmp;;
			 2) preinstall_lamp;install_lamp;;
			 3) preinstall_lnamp;install_lnamp;;
			 4) clear;pre_setting;;
			 *) echo "input error.";;
		esac
	done
}

#lnmp安装前设置
preinstall_lnmp(){
	#安装前设置
	stack="lnmp"
	php_mode="with_fastcgi"
	nginx_preinstall_settings
	mysql_preinstall_settings	
	php_preinstall_settings
	othersoft_preinstall_settings
}

#安装lnmp
install_lnmp(){	
	last_confirm
	#记录设置
	record_setting
	#开始安装
	disable_selinux
	install_tool
	[ "$nginx" != "do_not_install" ] && check_installed_ask "install_nginx" "$nginx_location"
	[ "$mysql" != "do_not_install" ] && check_installed_ask "install_mysqld" "$mysql_location"
	[ "$php" != "do_not_install" ] && check_installed_ask "install_php" "$php_location"
	[ "$php_modules_install" != "do_not_install" ] && install_php_modules "$php_location"
	[ "$other_soft_install" != "do_not_install" ] && install_other_soft
	post_done
}

#lamp安装前设置
preinstall_lamp(){
	#安装前设置
	stack="lamp"
	php_mode="with_apache"
	apache_preinstall_settings
	mysql_preinstall_settings	
	php_preinstall_settings
	othersoft_preinstall_settings
}

#安装lamp
install_lamp(){	
	last_confirm
	#记录设置
	record_setting	
	#开始安装
	disable_selinux
	install_tool
	[ "$apache" != "do_not_install" ] && check_installed_ask "install_apache" "$apache_location"
	[ "$mysql" != "do_not_install" ] && check_installed_ask "install_mysqld" "$mysql_location"
	[ "$php" != "do_not_install" ] && check_installed_ask "install_php" "$php_location"
	[ "$php_modules_install" != "do_not_install" ] && install_php_modules "$php_location"
	[ "$other_soft_install" != "do_not_install" ] && install_other_soft
	post_done
}


#lnamp安装前设置
preinstall_lnamp(){
	#安装前设置
	stack="lnamp"
	php_mode="with_apache"
	nginx_preinstall_settings
	apache_preinstall_settings
	mysql_preinstall_settings	
	php_preinstall_settings
	othersoft_preinstall_settings
}

#安装lnamp
install_lnamp(){	
	last_confirm
	#记录设置
	record_setting	
	#开始安装
	disable_selinux
	install_tool
	[ "$nginx" != "do_not_install" ] && check_installed_ask "install_nginx" "$nginx_location"
	[ "$apache" != "do_not_install" ] && check_installed_ask "install_apache" "$apache_location"
	[ "$mysql" != "do_not_install" ] && check_installed_ask "install_mysqld" "$mysql_location"
	[ "$php" != "do_not_install" ] && check_installed_ask "install_php" "$php_location"
	[ "$php_modules_install" != "do_not_install" ] && install_php_modules "$php_location"
	[ "$other_soft_install" != "do_not_install" ] && install_other_soft
	post_done
}


#nginx安装前设置
nginx_preinstall_settings(){
	custom_info=""	
	display_menu nginx
	#自定义版本支持
	if [ "$nginx" == "custom_version" ];then
		while true
		do
			read -p "input version.(ie.nginx-1.4.1 tengine-1.4.6 ngx_openresty-1.2.8.3): " version
			#判断版本号是否有效
			if echo "$version" | grep -q -E '^nginx-[0-9]+\.[0-9]+\.[0-9]+$';then
				nginx_filename=$version
				nginx=$version
				nginx_official_link="http://nginx.org/download/${nginx}.tar.gz"
				nginx_other_link=""
				custom_info="$custom_info\nnginx_filename=$version\nnginx_official_link=$nginx_official_link\nnginx_other_link=''\n"
				break
			elif echo "$version" | grep -q -E '^tengine-[0-9]+\.[0-9]+\.[0-9]+$';then
				tengine_filename=$version
				nginx=$version
				tengine_official_link="http://tengine.taobao.org/download/${nginx}.tar.gz"
				tengine_other_link=""
				custom_info="$custom_info\ntengine_filename=$version\ntengine_official_link=$tengine_official_link\ntengine_other_link=''\n"
				break
			elif echo "$version" | grep -q -E '^ngx_openresty-[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$';then
				openresty_filename=$version
				nginx=$version
				openresty_official_link="http://openresty.org/download/${nginx}.tar.gz"
				openresty_other_link=""
				custom_info="$custom_info\nopenresty_filename=$version\nopenresty_official_link=$openresty_official_link\nopenresty_other_link=''\n"
				break
			else
				echo "version invalid,please reinput."
			fi
		done
	fi	

	if [ "$nginx" != "do_not_install" ];then
		#设置默认路径
		[ "$nginx" == "${openresty_filename}" ] && nginx_default=/usr/local/openresty || nginx_default=/usr/local/nginx
		#nginx安装路径
		read -p "$nginx install location(default:$nginx_default,leave blank for default): " nginx_location
		#设置默认openresty的prefix为/usr/local,则nginx将安装在/usr/local/nginx
		nginx_location=${nginx_location:=$nginx_default}
		nginx_location=`filter_location "$nginx_location"`
		#nginx安装目录会在openresty的下级nginx目录
		[ "$nginx" == "${openresty_filename}" ] && echo "openresty location $nginx_location,nginx location ${nginx_location}/nginx" || echo "$nginx install location: $nginx_location"

		#定义nginx编译参数
		if [ "$nginx" == "${nginx_filename}" ];then
			nginx_configure_args="--prefix=${nginx_location} --with-http_ssl_module --with-openssl=$cur_dir/soft/${openssl_filename}  --with-http_sub_module --with-http_stub_status_module --with-pcre --with-pcre=$cur_dir/soft/${pcre_filename} --with-zlib=$cur_dir/soft/${zlib_filename} --with-http_secure_link_module"
		elif [ "$nginx" == "${tengine_filename}" ];then
			nginx_configure_args="--prefix=${nginx_location} --with-http_ssl_module --with-openssl=$cur_dir/soft/${openssl_filename} --with-http_realip_module  --with-http_stub_status_module --with-pcre --with-pcre=$cur_dir/soft/${pcre_filename} --with-zlib=$cur_dir/soft/${zlib_filename} --with-http_secure_link_module --with-http_concat_module --with-http_sysguard_module --with-http_upstream_check_module"
		elif [ "$nginx" == "${openresty_filename}" ];then
			nginx_configure_args="--prefix=${nginx_location} --with-luajit --with-http_ssl_module --with-openssl=$cur_dir/soft/${openssl_filename} --with-http_realip_module  --with-http_stub_status_module --with-pcre --with-pcre=$cur_dir/soft/${pcre_filename} --with-zlib=$cur_dir/soft/${zlib_filename} --with-http_secure_link_module"
		fi

		#提示是否更改编译参数
		echo -e "the $nginx configure parameter is:\n${nginx_configure_args}\n\n"
		yes_or_no "Would you like to change it [N/y]: " "read -p 'please input your new nginx configure parameter: ' nginx_configure_args" "echo 'you select no,configure parameter will not be changed.'"
		#检查编译参数是否为空
		while true; do
			if [ "$nginx_configure_args" == "" ];then
				echo "error.nginx configure parameter can not be empty,please reinput."
				read -p 'please input your new nginx configure parameter: ' nginx_configure_args
			else
				break
			fi	
		done
		[ "$yn" == "y" ] && echo -e "\nyour new nginx configure parameter is : ${nginx_configure_args}\n"		
	fi	
}

#apache安装前设置
apache_preinstall_settings(){
display_menu apache

#自定义版本支持
if [ "$apache" == "custom_version" ];then
	while true
	do
		read -p "input version.(ie.httpd-2.2.25 httpd-2.4.4): " version
		#判断版本号是否有效
		if echo "$version" | grep -q -E '^httpd-2\.2\.[0-9]+$';then
			apache2_2_filename=$version
			apache=$version
			read -p "please input $apache download url(must be tar.gz file format): "  apache2_2_official_link
			apache2_2_other_link=""
			custom_info="$custom_info\napache2_2_filename=$version\napache2_2_official_link=$apache2_2_official_link\napache2_2_other_link=''\n"
			break
		elif echo "$version" | grep -q -E '^httpd-2\.4\.[0-9]+$';then
			apache2_4_filename=$version
			apache=$version
			read -p "please input $apache download url(must be tar.gz file format): " apache2_4_official_link
			apache2_4_other_link=""
			custom_info="$custom_info\napache2_4_filename=$version\napache2_4_official_link=$apache2_4_official_link\napache2_4_other_link=''\n"
			break
		else
			echo "version invalid,please reinput."
		fi
	done	
fi	

if [ "$apache" != "do_not_install" ];then
	#apache安装路径
	read -p "$apache install location(default:/usr/local/apache,leave blank for default): " apache_location
	apache_location=${apache_location:="/usr/local/apache"}
	apache_location=`filter_location "$apache_location"`
	echo "$apache install location: $apache_location"

	#获取编译参数
	if [ "$apache" == "${apache2_2_filename}" ];then
		if package_support;then
			other_option=""
		else
			other_option="--with-z=${depends_prefix}/${zlib_filename} --with-ssl=${depends_prefix}/${openssl_filename}"
		fi	
		apache_configure_args="--prefix=${apache_location} --with-included-apr --enable-so --enable-deflate=shared --enable-expires=shared  --enable-ssl=shared --enable-headers=shared --enable-rewrite=shared --enable-static-support ${other_option}"
	elif [ "$apache" == "${apache2_4_filename}" ];then
		if package_support;then
			other_option=""
		else
			other_option="--with-z=${depends_prefix}/${zlib_filename} --with-ssl=${depends_prefix}/${openssl_filename} --with-pcre=${depends_prefix}/${pcre_filename}"
		fi	
		apache_configure_args="--prefix=${apache_location} --enable-so --enable-deflate=shared --enable-ssl=shared --enable-expires=shared  --enable-headers=shared --enable-rewrite=shared --enable-static-support  --with-included-apr $other_option"
	fi
	#提示是否更改编译参数
	echo -e "the $apache configure parameter is:\n${apache_configure_args}\n\n"
	yes_or_no "Would you like to change it [N/y]: " "read -p 'please input your new apache configure parameter: ' apache_configure_args" "echo 'you select no,configure parameter will not be changed.'"
	#检查编译参数是否为空
	while true; do
		if [ "$apache_configure_args" == "" ];then
			echo "error.apache configure parameter can not be empty,please reinput."
			read -p 'please input your new apache configure parameter: ' apache_configure_args
		else
			break
		fi	
	done
	[ "$yn" == "y" ] && echo -e "\nyour new apache configure parameter is : ${apache_configure_args}\n"	

fi


}

#mysql安装前设置
mysql_preinstall_settings(){
display_menu mysql
#自定义版本支持
if [ "$mysql" == "custom_version" ];then
	while true
	do
		read -p "input version.(ie.mysql-5.1.71 mysql-5.5.32 mysql-5.6.12): " version
		#判断版本号是否有效
		if echo "$version" | grep -q -E '^mysql-5\.1\.[0-9]+$';then
			mysql5_1_filename=$version
			mysql=$version
			mysql5_1_official_link="http://cdn.mysql.com/Downloads/MySQL-5.1/${mysql}.tar.gz"
			mysql5_1_other_link=""
			custom_info="$custom_info\nmysql5_1_filename=$version\nmysql5_1_official_link=$mysql5_1_official_link\nmysql5_1_other_link=''\n"
			break
		elif echo "$version" | grep -q -E '^mysql-5\.5\.[0-9]+$';then
			mysql5_5_filename=$version
			mysql=$version
			mysql5_5_official_link="http://cdn.mysql.com/Downloads/MySQL-5.5/${mysql}.tar.gz"
			mysql5_5_other_link=""
			custom_info="$custom_info\nmysql5_5_filename=$version\nmysql5_5_official_link=$mysql5_5_official_link\nmysql5_5_other_link=''\n"
			break
		elif echo "$version" | grep -q -E '^mysql-5\.6\.[0-9]+$';then
			mysql5_6_filename=$version
			mysql=$version
			mysql5_6_official_link="http://cdn.mysql.com/Downloads/MySQL-5.6/${mysql}.tar.gz"
			mysql5_6_other_link=""
			custom_info="$custom_info\nmysql5_6_filename=$version\nmysql5_6_official_link=$mysql5_6_official_link\nmysql5_6_other_link=''\n"
			break			
		else
			echo "version invalid,please reinput."
		fi
	done	
fi	

if [ "$mysql" != "do_not_install" ];then
	#mysql安装路径
	read -p "$mysql install location(default:/usr/local/mysql,leave blank for default): " mysql_location
	mysql_location=${mysql_location:="/usr/local/mysql"}
	mysql_location=`filter_location "$mysql_location"`
	echo "$mysql install location: $mysql_location"
	#当只编译client时，不必输入data和密码
	if [ "$mysql" != "libmysqlclient18" ];then
		#mysql data路径
		read -p "mysql data location(default:${mysql_location}/data,leave blank for default): " mysql_data_location
		mysql_data_location=${mysql_data_location:=$mysql_location/data}
		mysql_data_location=`filter_location "$mysql_data_location"`
		echo "$mysql install location: $mysql_data_location"
		#mysql密码设置
		read -p "mysql server root password (default:root,leave blank for default): " mysql_root_pass
		mysql_root_pass=${mysql_root_pass:=root}
		echo "$mysql root password: $mysql_root_pass"

		#定义mysql编译参数
		if [ "$mysql" == "${mysql5_1_filename}" ];then
			if package_support;then
				other_option=""
			else
				other_option="--with-named-curses-libs=${depends_prefix}/${ncurses_filename2}/lib/libncurses.a"
			fi			
			mysql_configure_args="--prefix=${mysql_location} --sysconfdir=${mysql_location}/etc --with-unix-socket-path=${mysql_data_location}/mysql.sock --with-charset=utf8 --with-collation=utf8_general_ci --with-extra-charsets=complex --with-plugins=max --with-mysqld-ldflags=-all-static --enable-assembler $other_option"
		elif [ "$mysql" == "${mysql5_5_filename}" ] || [ "$mysql" == "libmysqlclient18" ];then
			if package_support;then
				other_option=""
			else
				other_option="-DCURSES_LIBRARY=${depends_prefix}/${ncurses_filename}/lib/libncurses.a  -DCURSES_INCLUDE_PATH=${depends_prefix}/${ncurses_filename}/include/"
			fi
			mysql_configure_args="-DCMAKE_INSTALL_PREFIX=${mysql_location} -DSYSCONFDIR=${mysql_location}/etc -DMYSQL_UNIX_ADDR=${mysql_data_location}/mysql.sock -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_EXTRA_CHARSETS=complex -DWITH_READLINE=1 -DENABLED_LOCAL_INFILE=1 $other_option"
		elif [ "$mysql" == "${mysql5_6_filename}" ];then
			if package_support;then
				other_option=""
			else
				other_option="-DCURSES_LIBRARY=${depends_prefix}/${ncurses_filename}/lib/libncurses.a  -DCURSES_INCLUDE_PATH=${depends_prefix}/${ncurses_filename}/include/"
			fi
			mysql_configure_args="-DCMAKE_INSTALL_PREFIX=${mysql_location} -DSYSCONFDIR=${mysql_location}/etc -DMYSQL_UNIX_ADDR=${mysql_data_location}/mysql.sock -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_EXTRA_CHARSETS=complex -DWITH_READLINE=1 -DENABLED_LOCAL_INFILE=1 $other_option"
		fi

		#提示是否更改编译参数
		echo -e "the $mysql configure parameter is:\n${mysql_configure_args}\n\n"
		yes_or_no "Would you like to change it [N/y]: " "read -p 'please input your new mysql configure parameter: ' mysql_configure_args" "echo 'you select no,configure parameter will not be changed.'"
		#检查编译参数是否为空
		while true; do
			if [ "$mysql_configure_args" == "" ];then
				echo "error.mysql configure parameter can not be empty,please reinput."
				read -p 'please input your new mysql configure parameter: ' mysql_configure_args
			else
				break
			fi	
		done
		[ "$yn" == "y" ] && echo -e "\nyour new mysql configure parameter is : ${mysql_configure_args}\n"		
	else
		if package_support;then
			other_option=""
		else
			other_option="-DCURSES_LIBRARY=${depends_prefix}/${ncurses_filename}/lib/libncurses.a  -DCURSES_INCLUDE_PATH=${depends_prefix}/${ncurses_filename}/include/"
		fi
		mysql_configure_args="-DCMAKE_INSTALL_PREFIX=${mysql_location} -DSYSCONFDIR=${mysql_location}/etc -DMYSQL_UNIX_ADDR=${mysql_data_location}/mysql.sock -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_EXTRA_CHARSETS=complex -DWITH_READLINE=1 -DENABLED_LOCAL_INFILE=1 $other_option"		
	fi
fi	
}

#php安装前设置
php_preinstall_settings(){
display_menu php
#自定义版本支持
if [ "$php" == "custom_version" ];then
	while true
	do
		read -p "input version.(ie.php-5.2.17 php-5.3.26 php-5.4.16): " version
		#判断版本号是否有效
		if echo "$version" | grep -q -E '^php-5\.2\.[0-9]+$';then
			php5_2_filename=$version
			php=$version
			read -p "please input $php download url(must be tar.gz file format): "  php5_2_official_link
			php5_2_other_link=""
			custom_info="$custom_info\nphp5_2_filename=$version\nphp5_2_official_link=$php5_2_official_link\nphp5_2_other_link=''\n"
			break
		elif echo "$version" | grep -q -E '^php-5\.3\.[0-9]+$';then
			php5_3_filename=$version
			php=$version
			read -p "please input $php download url(must be tar.gz file format): " php5_3_official_link
			php5_3_other_link=""
			custom_info="$custom_info\nphp5_3_filename=$version\nphp5_3_official_link=$php5_3_official_link\nphp5_3_other_link=''\n"
			break
		elif echo "$version" | grep -q -E '^php-5\.4\.[0-9]+$';then
			php5_4_filename=$version
			php=$version
			read -p "please input $php download url(must be tar.gz file format): " php5_4_official_link
			php5_4_other_link=""
			custom_info="$custom_info\nphp5_4_filename=$version\nphp5_4_official_link=$php5_4_official_link\nphp5_4_other_link=''\n"
			break			
		else
			echo "version invalid,please reinput."
		fi
	done	
fi	

if [ "$php" != "do_not_install" ];then
	if [ "$php_mode" == "" ];then
		#选择php运行模式
		while true
		do
			for ((i=1;i<=${#php_mode_arr[@]};i++ )); do echo -e "$i) ${php_mode_arr[$i-1]}"; done
			echo
			read -p "choose php run mode: " mode
			php_mode=${php_mode_arr[$mode-1]}
			#输入有误时，从这里停止,重新循环
			[ "$php_mode" == "" ] && continue
			echo "you choose $php_mode"
			#判断当选择with_apache时，apache_location是否已经设置
			if [ "$apache_location" == "" ] && [ "$php_mode" == "with_apache" ];then
				read -p "apache location is not set,please set it: " apache_location
				apache_location=`filter_location "$apache_location"`
			fi	
			#apache2.4与php5.2不兼容，需要判断一下
			if [ "$php_mode" == "with_apache" ] && [ "$apache" == "${apache2_4_filename}" ] && [ "$php" == "${php5_2_filename}" ];then
				echo "${apache2_4_filename} is not compatible with ${php5_2_filename},please reselect"
				display_menu php
			else
				break
			fi	
		done
	else
		#apache2.4与php5.2不兼容，需要判断一下
		if [ "$php_mode" == "with_apache" ] && [ "$apache" == "${apache2_4_filename}" ] && [ "$php" == "${php5_2_filename}" ];then
			echo "${apache2_4_filename} is not compatible with ${php5_2_filename},please reselect"
			display_menu php
		fi	
	fi	
	#php安装路径
	read -p "$php install location(default:/usr/local/php,leave blank for default): " php_location
	php_location=${php_location:=/usr/local/php}
	php_location=`filter_location "$php_location"`
	echo "$php install location: $php_location"
	#安装php模块
	echo "#################### PHP modules install ####################"
	echo "$php version available modules:"
	echo
	if [ "$php" == "${php5_2_filename}" ];then
		#因为ZendGuardLoader不支持php5_2，所以从数组中删除
		php_modules_arr=(${php_modules_arr[@]#${ZendGuardLoader_filename}})
	elif [ "$php" == "${php5_3_filename}" ];then
		#因为ZendOptimizer不支持php5_3,所以从数组中删除
		php_modules_arr=(${php_modules_arr[@]#${ZendOptimizer_filename}})
	elif [ "$php" == "${php5_4_filename}" ];then
		#从数组中删除ZendOptimizer、eaccelerator、imagick
		php_modules_arr=(${php_modules_arr[@]#${ZendOptimizer_filename}})
		php_modules_arr=(${php_modules_arr[@]#${eaccelerator_filename}})
		php_modules_arr=(${php_modules_arr[@]#${php_imagemagick_filename}})
	fi
	#apache2.4 event模式不支持ZendGuardLoader
	[ "$apache" == "$apache2_4_filename" ] && php_modules_arr=(${php_modules_arr[@]#${ZendGuardLoader_filename}})
	for ((i=1;i<=${#php_modules_arr[@]};i++ )); do echo -e "$i) ${php_modules_arr[$i-1]}"; done
	echo
	php_modules_prompt="please input numbers of the modules you want,devide by ',': "
	OLD_IFS="$IFS"
	IFS=","
	while true
	do
		read -p "${php_modules_prompt}" php_modules
		php_modules=(${php_modules})
		unset php_modules_install wrong
		for i in ${php_modules[@]}
		do
			if [ "${php_modules_arr[$i-1]}" == "" ];then
				php_modules_prompt="input errors,please input number 1,2,3: ";
				wrong=1
				break
			elif [ "${php_modules_arr[$i-1]}" == "do_not_install" ];then
				unset php_modules_install
				php_modules_install="do_not_install"
				break 2
			else	
				php_modules_install="$php_modules_install ${php_modules_arr[$i-1]}"
				wrong=0
			fi
		done
		[ "$wrong" == 0 ] && break
	done
	IFS="$OLD_IFS"
	echo -e "your php modules selection ${php_modules_install}"
	
	#当选择不安装mysql server且php为5.2版本时，询问是否让php支持mysql
	if [ "$mysql" == "do_not_install" ] && [ "$php" == "${php5_2_filename}" ];then
		yes_or_no "you do_not_install mysql server,but whether make php support mysql [Y/n]" "read -p 'set mysql server location: ' mysql_location" "unset mysql_location ; echo 'do not make php support mysql.'"
	fi

	#获取编译参数

	#判断是否需要支持php mysql，否则取消php的--with-mysql编译参数
	[ "$mysql" == "do_not_install" ] && [ "$mysql_location" == "" ] && unset with_mysql || with_mysql="--with-mysql=$mysql_location --with-mysqli=$mysql_location/bin/mysql_config --with-pdo-mysql=$mysql_location/bin/mysql_config"

	#设置php5.3 php5.4使用mysqlnd
	with_mysqlnd="--with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd"

	#判断是64系统就加上--with-libdir=lib64  
	is_64bit && lib64="--with-libdir=lib64" || lib64=""	

	if [ "$php" == "${php5_2_filename}" ];then

		#判断php运行模式
		if [ "$php_mode" == "with_apache" ];then
			php_run_php_mode="--with-apxs2=${apache_location}/bin/apxs"
		elif [ "$php_mode" == "with_fastcgi" ];then
			php_run_php_mode="--enable-fastcgi --enable-fpm"
		fi
		
		#判断是否支持apt或者yum安装依赖
		if package_support;then
			other_option="--with-openssl --with-zlib --with-curl --with-gd --with-jpeg-dir --with-png-dir --with-freetype-dir --with-mcrypt --with-mhash "
		else
			other_option="--with-xml-config=${depends_prefix}/${libxml2_filename}/bin/xml2-config --with-libxml-dir=${depends_prefix}/${libxml2_filename} --with-openssl=${depends_prefix}/${openssl_filename} --with-zlib=${depends_prefix}/${zlib_filename} --with-zlib-dir=${depends_prefix}/${zlib_filename} --with-curl=${depends_prefix}/${libcurl_filename} --with-pcre-dir=${depends_prefix}/${pcre_filename} --with-openssl-dir=${depends_prefix}/${openssl_filename} --with-gd --with-jpeg-dir=${depends_prefix}/${libjpeg_filename}  --with-png-dir=${depends_prefix}/${libpng_filename} --with-freetype-dir=${depends_prefix}/${freetype_filename} --with-mcrypt=${depends_prefix}/${libmcrypt_filename} --with-mhash=${depends_prefix}/${mhash_filename}"
		fi

		#php编译参数
		php_configure_args="--prefix=$php_location  --with-config-file-path=${php_location}/etc ${php_run_php_mode} --enable-bcmath --enable-ftp --enable-mbstring --enable-sockets --enable-zip $other_option   ${with_mysql} --without-pear $lib64"

	elif [ "$php" == "${php5_3_filename}" ];then

		#判断php运行模式
		if [ "$php_mode" == "with_apache" ];then
			php_run_php_mode="--with-apxs2=${apache_location}/bin/apxs"
		elif [ "$php_mode" == "with_fastcgi" ];then
			php_run_php_mode="--enable-fpm"
		fi	

		if package_support;then
			other_option="--with-openssl --with-zlib --with-curl --with-gd --with-jpeg-dir --with-png-dir --with-freetype-dir --with-mcrypt --with-mhash"
		else
			other_option="--with-libxml-dir=${depends_prefix}/${libxml2_filename} --with-openssl=${depends_prefix}/${openssl_filename} --with-zlib=${depends_prefix}/${zlib_filename} --with-zlib-dir=${depends_prefix}/${zlib_filename} --with-curl=${depends_prefix}/${libcurl_filename} --with-pcre-dir=${depends_prefix}/${pcre_filename} --with-openssl-dir=${depends_prefix}/${openssl_filename} --with-gd --with-jpeg-dir=${depends_prefix}/${libjpeg_filename}  --with-png-dir=${depends_prefix}/${libpng_filename} --with-freetype-dir=${depends_prefix}/${freetype_filename} --with-mcrypt=${depends_prefix}/${libmcrypt_filename} --with-mhash=${depends_prefix}/${mhash_filename}"
		fi

		php_configure_args="--prefix=$php_location --with-config-file-path=${php_location}/etc ${php_run_php_mode} --enable-bcmath --enable-ftp --enable-mbstring --enable-sockets --enable-zip  $other_option  ${with_mysqlnd} --without-pear $lib64 --disable-fileinfo"

	elif [ "$php" == "${php5_4_filename}" ];then

		#判断php运行模式
		if [ "$php_mode" == "with_apache" ];then
			php_run_php_mode="--with-apxs2=${apache_location}/bin/apxs"
		elif [ "$php_mode" == "with_fastcgi" ];then
			php_run_php_mode="--enable-fpm"
		fi

		if package_support;then
			other_option="--with-openssl --with-zlib --with-curl --with-gd --with-jpeg-dir --with-png-dir --with-freetype-dir --with-mcrypt --with-mhash"
		else
			other_option="--with-libxml-dir=${depends_prefix}/${libxml2_filename} --with-openssl=${depends_prefix}/${openssl_filename} --with-zlib=${depends_prefix}/${zlib_filename} --with-zlib-dir=${depends_prefix}/${zlib_filename} --with-curl=${depends_prefix}/${libcurl_filename} --with-pcre-dir=${depends_prefix}/${pcre_filename} --with-openssl-dir=${depends_prefix}/${openssl_filename} --with-gd --with-jpeg-dir=${depends_prefix}/${libjpeg_filename}  --with-png-dir=${depends_prefix}/${libpng_filename} --with-freetype-dir=${depends_prefix}/${freetype_filename} --with-mcrypt=${depends_prefix}/${libmcrypt_filename} --with-mhash=${depends_prefix}/${mhash_filename} "
		fi

		php_configure_args="--prefix=$php_location --with-config-file-path=${php_location}/etc ${php_run_php_mode} --enable-bcmath --enable-ftp --enable-mbstring --enable-sockets --enable-zip  $other_option ${with_mysqlnd} --without-pear $lib64 --disable-fileinfo"
	fi

	#提示是否更改编译参数
	echo -e "the $php configure parameter is:\n${php_configure_args}\n\n"
	yes_or_no "Would you like to change it [N/y]: " "read -p 'please input your new php configure parameter: ' php_configure_args" "echo 'you select no,configure parameter will not be changed.'"
	#检查编译参数是否为空
	while true; do
		if [ "$php_configure_args" == "" ];then
			echo "error.php configure parameter can not be empty,please reinput."
			read -p 'please input your new php configure parameter: ' php_configure_args
		else
			break
		fi	
	done
	[ "$yn" == "y" ] && echo -e "\nyour new php configure parameter is : ${php_configure_args}\n"
fi
}

#安装其它软件前设置
othersoft_preinstall_settings(){
echo  "#################### Other software install ####################"
echo
for ((i=1;i<=${#other_soft_arr[@]};i++ )); do echo -e "$i) ${other_soft_arr[$i-1]}"; done
echo
other_prompt="please input a number: "
while true
do
	read -p "${other_prompt}" other_soft
	other_soft=(${other_soft})
	unset other_soft_install wrong
	for j in ${other_soft[@]}
	do
		if [ "${other_soft_arr[$j-1]}" == "" ];then
			other_soft_prompt="input errors,please input number a number: ";
			wrong=1
			break
		elif [ "${other_soft_arr[$j-1]}" == "do_not_install" ];then
			unset other_soft_install
			other_soft_install="do_not_install"
			break 2
		else
			other_soft_install="$other_soft_install ${other_soft_arr[$j-1]}"
			wrong=0
		fi
	done
	[ "$wrong" == 0 ] && break
done
echo -e "your other software selection ${other_soft_install}"

#配置安装路径
if [ "$other_soft_install" != "do_not_install" ];then
	nginx_location=${nginx_location:=/usr/local/nginx}

	if if_in_array "${memcached_filename}" "$other_soft_install";then
		read -p "input $memcached_filename location(default:/usr/local/memcached): " memcached_location
		memcached_location=${memcached_location:=/usr/local/memcached}
		echo "memcached location: $memcached_location"
	fi	

	if if_in_array "${PureFTPd_filename}" "$other_soft_install";then
		read -p "input $PureFTPd_filename location(default:/usr/local/pureftpd): " pureftpd_location
		pureftpd_location=${pureftpd_location:=/usr/local/pureftpd}
		echo "pureftpd location: $pureftpd_location"
	fi	

	if if_in_array "${phpMyAdmin_filename}" "$other_soft_install";then
		default_location="/home/wwwroot/phpmyadmin"
		read -p "input $phpMyAdmin_filename location(default:$default_location): " phpmyadmin_location
		phpmyadmin_location=${phpmyadmin_location:=$default_location}
		echo "phpmyadmin location: $phpmyadmin_location"
	fi	
fi
}

#记录设置信息
record_setting(){
#写入设置到临时文件，以备下次重新安装使用
cat >/root/previous_setting <<EOF
stack="$stack"
nginx="$nginx"
nginx_location="$nginx_location"
nginx_configure_args='${nginx_configure_args}'
apache="$apache"
apache_location="$apache_location"
apache_configure_args='${apache_configure_args}'
mysql="$mysql"
mysql_location="$mysql_location"
mysql_data_location="$mysql_data_location"
mysql_root_pass="$mysql_root_pass"
mysql_configure_args='${mysql_configure_args}'
php="$php"
php_location="$php_location"
php_mode="$php_mode"
php_modules_install="${php_modules_install}"
php_configure_args='${php_configure_args}'
other_soft_install="${other_soft_install}"
memcached_location="${memcached_location}"
pureftpd_location="${pureftpd_location}"
phpmyadmin_location="${phpmyadmin_location}"

EOF
#自定义版本时增加变量
echo -e "$custom_info" >> /root/previous_setting
}


#安装前设置
pre_setting(){
#主菜单
while true
do
	#使read能支持回格删除
	stty erase "^H"
	echo -e "1) LAMP LNMP LANMP Pre-installation Settings.\n2) System or Software Settings.\n3) Exit.\n"
	read -p "please select: " select
	case $select in
	1) echo "you select Pre-installation settings." ; if_use_previous_setting ; break;;
	2) echo "you select tools." ; tools_setting ; break;;
	3) echo "you select exit." ; exit 1;;
	*) echo "input error.";;
	esac
done
}

#完成后的一些配置
post_done(){
echo "start programs..."	
[ "$nginx" != "do_not_install" ] && [ "$stack" != "lamp" ] &&  /etc/init.d/nginx start
[ "$apache" != "do_not_install" ] && [ "$stack" != "lnmp" ] && /etc/init.d/httpd start

if 	[ "$mysql" != "do_not_install" ] &&  [ "$mysql" != "libmysqlclient18" ];then
	#配置mysql
	/etc/init.d/mysqld start
	${mysql_location}/bin/mysqladmin -u root password "$mysql_root_pass"
	#add to path
	! grep -q "${mysql_location}/bin" /etc/profile && echo "PATH=${mysql_location}/bin:$PATH" >> /etc/profile
	. /etc/profile
fi
[ "$php" != "do_not_install" ] && [ $php_mode == "with_fastcgi" ] && /etc/init.d/php-fpm start
if_in_array "${memcached_filename}" "$other_soft_install" && /etc/init.d/memcached start
if_in_array "${PureFTPd_filename}" "$other_soft_install" && /etc/init.d/pureftpd start
netstat -nxtlp
echo "depends_prefix=$depends_prefix" >> /tmp/ezhttp_info_do_not_del
\cp $cur_dir/ez /usr/bin/ez
chmod +x /usr/bin/ez
[ "$apache" == "${apache2_4_filename}" ] && sed -i 's/Allow from All/Require all granted/' /usr/bin/ez
#记录安装了哪个包
echo "stack=$stack" >> /tmp/ezhttp_info_do_not_del
exit
}

#最后确认
last_confirm(){
	sleep 1
	clear
	echo "#################### your choice overview ####################"
	echo
	echo "Package: ${stack}"
	echo
	[ "$stack" != "lamp" ] && echo "*****Nginx Setting*****"
	[ "$stack" != "lamp" ] && echo "Nginx: ${nginx}"
	[ "$nginx" != "do_not_install" ] && [ "$stack" != "lamp" ] && echo "Nginx Location: $nginx_location"
	[ "$nginx" != "do_not_install" ] && [ "$stack" != "lamp" ] && echo "Nginx Configure Parameter: ${nginx_configure_args}"
	echo
	[ "$stack" != "lnmp" ] && echo "*****Apache Setting*****"
	[ "$stack" != "lnmp" ] && echo "Apache: ${apache}"
	[ "$apache" != "do_not_install" ] && [ "$stack" != "lnmp" ] && echo "Apache Location: $apache_location"
	[ "$apache" != "do_not_install" ] && [ "$stack" != "lnmp" ] && echo "Apache Configure Parameter: ${apache_configure_args}"
	echo
	echo "*****MySQL Setting*****"
	echo "MySQL Server: $mysql"
	[ "$mysql" != "do_not_install" ] || [ "$mysql_location" != "" ] && echo "MySQL Location: $mysql_location"
	[ "$mysql" != "do_not_install" ] || [ "$mysql_data_location" != "" ] &&  echo "MySQL Data Location: $mysql_data_location"
	[ "$mysql" != "do_not_install" ] || [ "$mysql_root_pass" != "" ] && echo "MySQL Root Password: $mysql_root_pass"
	[ "$mysql" != "do_not_install" ] && echo "MySQL Configure Parameter: ${mysql_configure_args}"
	echo
	echo "*****PHP Setting*****"
	echo "PHP Version: $php"
	[ "$php" != "do_not_install" ] && echo "PHP Location: $php_location"
	[ "$php" != "do_not_install" ] && echo "PHP Modules: ${php_modules_install}"
	[ "$php" != "do_not_install" ] && echo "PHP Configure Parameter: ${php_configure_args}"
	echo
	echo "*****Other Software Setting*****"
	echo "Other Software: ${other_soft_install}"
	if_in_array "${memcached_filename}" "$other_soft_install" && echo "memcached location: $memcached_location"
	if_in_array "${PureFTPd_filename}" "$other_soft_install" && echo "pureftpd location: $pureftpd_location"
	if_in_array "${phpMyAdmin_filename}" "$other_soft_install" && echo "phpmyadmin_location: $phpmyadmin_location"
	echo
	echo "##############################################################"
	echo
	#最终确认是否安装
	yes_or_no "Are you ready to configure your Linux [Y/n]: " "echo 'start to configure linux...'" "clear ; pre_setting"
}

#swap设置
swap_settings(){
	swapSize=$(awk '/SwapTotal/{print $2}' /proc/meminfo)
	if [ "$swapSize" == 0 ];then
		while true; do
			echo -e "1) 512M\n2) 1G\n3) 2G\n4) 4G\n5) 8G\n"
			read -p "please select your swap size: " swapSelect			
			case $swapSelect in
				1) swapSize=524288;break;;
				2) swapSize=1048576;break;;
				3) swapSize=2097152;break;;
				4) swapSize=4194304;break;;
				*) echo "input error,please reinput."
			esac
		done

		swapLocationDefault="/swapfile"
		read -p "please input the swap file location(default:${swapLocationDefault},leave blank for default.): " swapLocation
		swapLocation=${swapLocation:=$swapLocationDefault}
		swapLocation=`filter_location ${swapLocation}`

		echo "start setting system swap..."
		mkdir -p `dirname $swapLocation`
		dd if=/dev/zero of=${swapLocation} bs=1024 count=${swapSize}
		mkswap ${swapLocation}
		swapon ${swapLocation}
		! grep "${swapLocation} swap swap defaults 0 0" /etc/fstab && echo "${swapLocation} swap swap defaults 0 0" >> /etc/fstab

		echo "swap settings complete."
		free -m
		exit

	else
		echo "Your system swap had been enabled,exit."
		exit
	fi	
}

#设置php mysql默认socket路径
php_mysql_socket_settings(){
	while true; do
		read -p "please input php.in location(ie./usr/local/php/etc/php.ini): " php_ini_location
		if [ ! -f  ${php_ini_location} ] || [ "$php_ini_location" == "" ];then
			echo "${php_ini_location} not found,please reinput."
		else
			break
		fi
	done

	while true; do
		read -p "please input mysql.sock location(ie./usr/local/mysql/data/mysql.sock): " mysql_sock_location
		if [ ! -S  ${mysql_sock_location} ] || [ "$mysql_sock_location" == "" ];then
			echo "${mysql_sock_location} not found or is not a socket file,please reinput."
		else
			break
		fi		
	done

	sed -i "s#mysql.default_socket.*#mysql.default_socket = ${mysql_sock_location}#" ${php_ini_location}
	sed -i "s#mysqli.default_socket.*#mysqli.default_socket = ${mysql_sock_location}#" ${php_ini_location}
	sed -i "s#pdo_mysql.default_socket.*#pdo_mysql.default_socket = ${mysql_sock_location}#" ${php_ini_location}
	echo "successfully set php mysql sock,you should restart the php to take it effect."
	exit 
}

#工具设置
tools_setting(){
	clear
	display_menu tools
	if [ "$tools" == "back-to-main-menu" ];then
		clear
		pre_setting
	else
		[ "$tools" == "System-swap-settings" ] && swap_settings
		[ "$tools" == "Set-php-mysql-socket" ] && php_mysql_socket_settings
	fi	

}

#配置linux
deploy_linux(){
#创建记录安装路径信息文件
touch /tmp/ezhttp_info_do_not_del
#不允许删除，只允许追加
chattr +a /tmp/ezhttp_info_do_not_del	
clear
echo "#############################################################################"
echo
echo "You are welcome to use this script to deploy your linux,hope you like."
echo "The script is written by Zhu Maohai."
echo "If you have any question."
echo "please visit http://www.centos.bz/ezhttp/ and submit your issue.thank you."
echo
echo "############################################################################"
echo
rootness
pre_setting
if [ ${select} == 1 ];then
	if_use_previous_setting
elif [ ${select} == 2 ];then
	tools_setting
else
	echo "nothing to do."
	exit
fi	
}